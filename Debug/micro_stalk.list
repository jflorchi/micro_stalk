
micro_stalk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000321c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080032dc  080032dc  000132dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800330c  0800330c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800330c  0800330c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800330c  0800330c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003310  08003310  00013310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000010  08003324  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003324  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000642c  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001477  00000000  00000000  00026464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e8  00000000  00000000  000278e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000540  00000000  00000000  00027ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017444  00000000  00000000  00028408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006da0  00000000  00000000  0003f84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000861a2  00000000  00000000  000465ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc78e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013cc  00000000  00000000  000cc7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032c4 	.word	0x080032c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080032c4 	.word	0x080032c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fda7 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f9dd 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fad1 	bl	80007d4 <MX_GPIO_Init>
  MX_CAN_Init();
 8000232:	f000 fa79 	bl	8000728 <MX_CAN_Init>
  MX_ADC_Init();
 8000236:	f000 fa1b 	bl	8000670 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  ENABLE_CAN_TRANSCEIVER();
 800023a:	4bd5      	ldr	r3, [pc, #852]	; (8000590 <main+0x370>)
 800023c:	2200      	movs	r2, #0
 800023e:	2102      	movs	r1, #2
 8000240:	0018      	movs	r0, r3
 8000242:	f002 fb14 	bl	800286e <HAL_GPIO_WritePin>
  LED_OFF();
 8000246:	2390      	movs	r3, #144	; 0x90
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	2200      	movs	r2, #0
 800024c:	2104      	movs	r1, #4
 800024e:	0018      	movs	r0, r3
 8000250:	f002 fb0d 	bl	800286e <HAL_GPIO_WritePin>
  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000254:	4bcf      	ldr	r3, [pc, #828]	; (8000594 <main+0x374>)
 8000256:	0018      	movs	r0, r3
 8000258:	f001 fbd0 	bl	80019fc <HAL_CAN_Start>
 800025c:	1e03      	subs	r3, r0, #0
 800025e:	d006      	beq.n	800026e <main+0x4e>
	  LED_ON();
 8000260:	2390      	movs	r3, #144	; 0x90
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	2201      	movs	r2, #1
 8000266:	2104      	movs	r1, #4
 8000268:	0018      	movs	r0, r3
 800026a:	f002 fb00 	bl	800286e <HAL_GPIO_WritePin>
  }
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800026e:	4bc9      	ldr	r3, [pc, #804]	; (8000594 <main+0x374>)
 8000270:	2102      	movs	r1, #2
 8000272:	0018      	movs	r0, r3
 8000274:	f001 fe61 	bl	8001f3a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000278:	4bc6      	ldr	r3, [pc, #792]	; (8000594 <main+0x374>)
 800027a:	2110      	movs	r1, #16
 800027c:	0018      	movs	r0, r3
 800027e:	f001 fe5c 	bl	8001f3a <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  if (HAL_GetTick() - lastSeen > 500) {
 8000282:	f000 fdd3 	bl	8000e2c <HAL_GetTick>
 8000286:	0002      	movs	r2, r0
 8000288:	4bc3      	ldr	r3, [pc, #780]	; (8000598 <main+0x378>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	1ad2      	subs	r2, r2, r3
 800028e:	23fa      	movs	r3, #250	; 0xfa
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	429a      	cmp	r2, r3
 8000294:	d902      	bls.n	800029c <main+0x7c>
		  ignition = 0;
 8000296:	4bc1      	ldr	r3, [pc, #772]	; (800059c <main+0x37c>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
	  }

	  if (ignition == 1) {
 800029c:	4bbf      	ldr	r3, [pc, #764]	; (800059c <main+0x37c>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d000      	beq.n	80002a6 <main+0x86>
 80002a4:	e160      	b.n	8000568 <main+0x348>
		  LED_ON();
 80002a6:	2390      	movs	r3, #144	; 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2201      	movs	r2, #1
 80002ac:	2104      	movs	r1, #4
 80002ae:	0018      	movs	r0, r3
 80002b0:	f002 fadd 	bl	800286e <HAL_GPIO_WritePin>
		  HAL_ADC_Start(&hadc);
 80002b4:	4bba      	ldr	r3, [pc, #744]	; (80005a0 <main+0x380>)
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 ff26 	bl	8001108 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc, 1);
 80002bc:	4bb8      	ldr	r3, [pc, #736]	; (80005a0 <main+0x380>)
 80002be:	2101      	movs	r1, #1
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 ff75 	bl	80011b0 <HAL_ADC_PollForConversion>
		  uint32_t mediaButton = HAL_ADC_GetValue(&hadc);
 80002c6:	4bb6      	ldr	r3, [pc, #728]	; (80005a0 <main+0x380>)
 80002c8:	0018      	movs	r0, r3
 80002ca:	f001 f809 	bl	80012e0 <HAL_ADC_GetValue>
 80002ce:	0003      	movs	r3, r0
 80002d0:	60bb      	str	r3, [r7, #8]
		  if (mediaButton >= 3600 && mediaButton <= 4500) { // increase speed
 80002d2:	68ba      	ldr	r2, [r7, #8]
 80002d4:	23e1      	movs	r3, #225	; 0xe1
 80002d6:	011b      	lsls	r3, r3, #4
 80002d8:	429a      	cmp	r2, r3
 80002da:	d339      	bcc.n	8000350 <main+0x130>
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	4ab1      	ldr	r2, [pc, #708]	; (80005a4 <main+0x384>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d835      	bhi.n	8000350 <main+0x130>
			  if (controlsPressed[0] == 0) {
 80002e4:	4bb0      	ldr	r3, [pc, #704]	; (80005a8 <main+0x388>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d114      	bne.n	8000316 <main+0xf6>
				  // rising edge
				  controlsPressedTime[0] = HAL_GetTick();
 80002ec:	f000 fd9e 	bl	8000e2c <HAL_GetTick>
 80002f0:	0002      	movs	r2, r0
 80002f2:	4bae      	ldr	r3, [pc, #696]	; (80005ac <main+0x38c>)
 80002f4:	601a      	str	r2, [r3, #0]
				  controlsPressed[0] = 1;
 80002f6:	4bac      	ldr	r3, [pc, #688]	; (80005a8 <main+0x388>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]
				  if (cruiseOn == 0) {
 80002fc:	4bac      	ldr	r3, [pc, #688]	; (80005b0 <main+0x390>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d000      	beq.n	8000306 <main+0xe6>
 8000304:	e0a9      	b.n	800045a <main+0x23a>
					  cruiseOn = 1;
 8000306:	4baa      	ldr	r3, [pc, #680]	; (80005b0 <main+0x390>)
 8000308:	2201      	movs	r2, #1
 800030a:	701a      	strb	r2, [r3, #0]
					  setSpeed = lastSpeed;
 800030c:	4ba9      	ldr	r3, [pc, #676]	; (80005b4 <main+0x394>)
 800030e:	881a      	ldrh	r2, [r3, #0]
 8000310:	4ba9      	ldr	r3, [pc, #676]	; (80005b8 <main+0x398>)
 8000312:	801a      	strh	r2, [r3, #0]
			  if (controlsPressed[0] == 0) {
 8000314:	e0a1      	b.n	800045a <main+0x23a>
				  }
			  } else {
				  if (HAL_GetTick() - controlsPressedTime[0] >= 250) {
 8000316:	f000 fd89 	bl	8000e2c <HAL_GetTick>
 800031a:	0002      	movs	r2, r0
 800031c:	4ba3      	ldr	r3, [pc, #652]	; (80005ac <main+0x38c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	1ad3      	subs	r3, r2, r3
 8000322:	2bf9      	cmp	r3, #249	; 0xf9
 8000324:	d800      	bhi.n	8000328 <main+0x108>
 8000326:	e098      	b.n	800045a <main+0x23a>
					  controlsPressedTime[0] = HAL_GetTick();
 8000328:	f000 fd80 	bl	8000e2c <HAL_GetTick>
 800032c:	0002      	movs	r2, r0
 800032e:	4b9f      	ldr	r3, [pc, #636]	; (80005ac <main+0x38c>)
 8000330:	601a      	str	r2, [r3, #0]
					  if (cruiseOn == 1) {
 8000332:	4b9f      	ldr	r3, [pc, #636]	; (80005b0 <main+0x390>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d000      	beq.n	800033c <main+0x11c>
 800033a:	e08e      	b.n	800045a <main+0x23a>
						  setSpeed += 5;
 800033c:	4b9e      	ldr	r3, [pc, #632]	; (80005b8 <main+0x398>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	3305      	adds	r3, #5
 8000342:	b29a      	uxth	r2, r3
 8000344:	4b9c      	ldr	r3, [pc, #624]	; (80005b8 <main+0x398>)
 8000346:	801a      	strh	r2, [r3, #0]
						  bigHopped = 1;
 8000348:	4b9c      	ldr	r3, [pc, #624]	; (80005bc <main+0x39c>)
 800034a:	2201      	movs	r2, #1
 800034c:	701a      	strb	r2, [r3, #0]
			  if (controlsPressed[0] == 0) {
 800034e:	e084      	b.n	800045a <main+0x23a>
					  }
				  }
			  }
		  } else if (mediaButton >= 2600 && mediaButton <= 3500) { // decrease speed
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4a9b      	ldr	r2, [pc, #620]	; (80005c0 <main+0x3a0>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d92c      	bls.n	80003b2 <main+0x192>
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	4a9a      	ldr	r2, [pc, #616]	; (80005c4 <main+0x3a4>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d828      	bhi.n	80003b2 <main+0x192>
			  if (controlsPressed[1] == 0) {
 8000360:	4b91      	ldr	r3, [pc, #580]	; (80005a8 <main+0x388>)
 8000362:	785b      	ldrb	r3, [r3, #1]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d108      	bne.n	800037a <main+0x15a>
				  // rising edge
				  controlsPressedTime[1] = HAL_GetTick();
 8000368:	f000 fd60 	bl	8000e2c <HAL_GetTick>
 800036c:	0002      	movs	r2, r0
 800036e:	4b8f      	ldr	r3, [pc, #572]	; (80005ac <main+0x38c>)
 8000370:	605a      	str	r2, [r3, #4]
				  controlsPressed[1] = 1;
 8000372:	4b8d      	ldr	r3, [pc, #564]	; (80005a8 <main+0x388>)
 8000374:	2201      	movs	r2, #1
 8000376:	705a      	strb	r2, [r3, #1]
			  if (controlsPressed[1] == 0) {
 8000378:	e071      	b.n	800045e <main+0x23e>
			  } else {
				  if (HAL_GetTick() - controlsPressedTime[1] >= 250) {
 800037a:	f000 fd57 	bl	8000e2c <HAL_GetTick>
 800037e:	0002      	movs	r2, r0
 8000380:	4b8a      	ldr	r3, [pc, #552]	; (80005ac <main+0x38c>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	2bf9      	cmp	r3, #249	; 0xf9
 8000388:	d800      	bhi.n	800038c <main+0x16c>
 800038a:	e068      	b.n	800045e <main+0x23e>
					  controlsPressedTime[1] = HAL_GetTick();
 800038c:	f000 fd4e 	bl	8000e2c <HAL_GetTick>
 8000390:	0002      	movs	r2, r0
 8000392:	4b86      	ldr	r3, [pc, #536]	; (80005ac <main+0x38c>)
 8000394:	605a      	str	r2, [r3, #4]
					  if (cruiseOn == 0) {
 8000396:	4b86      	ldr	r3, [pc, #536]	; (80005b0 <main+0x390>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d05f      	beq.n	800045e <main+0x23e>

					  } else {
						  setSpeed -= 5;
 800039e:	4b86      	ldr	r3, [pc, #536]	; (80005b8 <main+0x398>)
 80003a0:	881b      	ldrh	r3, [r3, #0]
 80003a2:	3b05      	subs	r3, #5
 80003a4:	b29a      	uxth	r2, r3
 80003a6:	4b84      	ldr	r3, [pc, #528]	; (80005b8 <main+0x398>)
 80003a8:	801a      	strh	r2, [r3, #0]
						  bigHopped = 1;
 80003aa:	4b84      	ldr	r3, [pc, #528]	; (80005bc <main+0x39c>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	701a      	strb	r2, [r3, #0]
			  if (controlsPressed[1] == 0) {
 80003b0:	e055      	b.n	800045e <main+0x23e>
					  }
				  }
			  }
		  } else if (mediaButton >= 1600 && mediaButton <= 2500) { // increase follow distance
 80003b2:	68ba      	ldr	r2, [r7, #8]
 80003b4:	23c8      	movs	r3, #200	; 0xc8
 80003b6:	00db      	lsls	r3, r3, #3
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d303      	bcc.n	80003c4 <main+0x1a4>
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	4a82      	ldr	r2, [pc, #520]	; (80005c8 <main+0x3a8>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d94d      	bls.n	8000460 <main+0x240>

		  } else if (mediaButton >= 600 && mediaButton <= 1500) { // decrease follow distance
 80003c4:	68ba      	ldr	r2, [r7, #8]
 80003c6:	2396      	movs	r3, #150	; 0x96
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d303      	bcc.n	80003d6 <main+0x1b6>
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	4a7e      	ldr	r2, [pc, #504]	; (80005cc <main+0x3ac>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d944      	bls.n	8000460 <main+0x240>

		  } else {
			  // detect falling edge
			  for (uint8_t i = 0; i < 4; i++) {
 80003d6:	230f      	movs	r3, #15
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
 80003de:	e036      	b.n	800044e <main+0x22e>
				  if (controlsPressed[i] == 1) {
 80003e0:	210f      	movs	r1, #15
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4a70      	ldr	r2, [pc, #448]	; (80005a8 <main+0x388>)
 80003e8:	5cd3      	ldrb	r3, [r2, r3]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d129      	bne.n	8000442 <main+0x222>
					  if (bigHopped == 0) {
 80003ee:	4b73      	ldr	r3, [pc, #460]	; (80005bc <main+0x39c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d116      	bne.n	8000424 <main+0x204>
						  if (i == 0) {
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d106      	bne.n	800040c <main+0x1ec>
							  setSpeed += 1;
 80003fe:	4b6e      	ldr	r3, [pc, #440]	; (80005b8 <main+0x398>)
 8000400:	881b      	ldrh	r3, [r3, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	b29a      	uxth	r2, r3
 8000406:	4b6c      	ldr	r3, [pc, #432]	; (80005b8 <main+0x398>)
 8000408:	801a      	strh	r2, [r3, #0]
 800040a:	e00e      	b.n	800042a <main+0x20a>
						  } else if (i == 1) {
 800040c:	230f      	movs	r3, #15
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d109      	bne.n	800042a <main+0x20a>
							  setSpeed -= 1;
 8000416:	4b68      	ldr	r3, [pc, #416]	; (80005b8 <main+0x398>)
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	3b01      	subs	r3, #1
 800041c:	b29a      	uxth	r2, r3
 800041e:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <main+0x398>)
 8000420:	801a      	strh	r2, [r3, #0]
 8000422:	e002      	b.n	800042a <main+0x20a>

						  } else if (i == 3) {

						  }
					  } else {
						  bigHopped = 0;
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <main+0x39c>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
					  }
					  controlsPressed[i] = 0;
 800042a:	200f      	movs	r0, #15
 800042c:	183b      	adds	r3, r7, r0
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4a5d      	ldr	r2, [pc, #372]	; (80005a8 <main+0x388>)
 8000432:	2100      	movs	r1, #0
 8000434:	54d1      	strb	r1, [r2, r3]
					  controlsPressedTime[i] = 0;
 8000436:	183b      	adds	r3, r7, r0
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	4b5c      	ldr	r3, [pc, #368]	; (80005ac <main+0x38c>)
 800043c:	0092      	lsls	r2, r2, #2
 800043e:	2100      	movs	r1, #0
 8000440:	50d1      	str	r1, [r2, r3]
			  for (uint8_t i = 0; i < 4; i++) {
 8000442:	210f      	movs	r1, #15
 8000444:	187b      	adds	r3, r7, r1
 8000446:	781a      	ldrb	r2, [r3, #0]
 8000448:	187b      	adds	r3, r7, r1
 800044a:	3201      	adds	r2, #1
 800044c:	701a      	strb	r2, [r3, #0]
 800044e:	230f      	movs	r3, #15
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b03      	cmp	r3, #3
 8000456:	d9c3      	bls.n	80003e0 <main+0x1c0>
 8000458:	e002      	b.n	8000460 <main+0x240>
			  if (controlsPressed[0] == 0) {
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	e000      	b.n	8000460 <main+0x240>
			  if (controlsPressed[1] == 0) {
 800045e:	46c0      	nop			; (mov r8, r8)
			  }
		  }


		  // Signal light is on if GPIO is low, it's normally high.
		  signalLights[0] = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) ? 0x00 : 0xFF;
 8000460:	2390      	movs	r3, #144	; 0x90
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	2101      	movs	r1, #1
 8000466:	0018      	movs	r0, r3
 8000468:	f002 f9e4 	bl	8002834 <HAL_GPIO_ReadPin>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d001      	beq.n	8000474 <main+0x254>
 8000470:	2200      	movs	r2, #0
 8000472:	e000      	b.n	8000476 <main+0x256>
 8000474:	22ff      	movs	r2, #255	; 0xff
 8000476:	4b56      	ldr	r3, [pc, #344]	; (80005d0 <main+0x3b0>)
 8000478:	701a      	strb	r2, [r3, #0]
		  signalLights[1] = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) ? 0x00 : 0xFF;
 800047a:	2390      	movs	r3, #144	; 0x90
 800047c:	05db      	lsls	r3, r3, #23
 800047e:	2102      	movs	r1, #2
 8000480:	0018      	movs	r0, r3
 8000482:	f002 f9d7 	bl	8002834 <HAL_GPIO_ReadPin>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <main+0x26e>
 800048a:	2200      	movs	r2, #0
 800048c:	e000      	b.n	8000490 <main+0x270>
 800048e:	22ff      	movs	r2, #255	; 0xff
 8000490:	4b4f      	ldr	r3, [pc, #316]	; (80005d0 <main+0x3b0>)
 8000492:	705a      	strb	r2, [r3, #1]
		  sendCAN(0x614, signalLights, 2);
 8000494:	4b4e      	ldr	r3, [pc, #312]	; (80005d0 <main+0x3b0>)
 8000496:	484f      	ldr	r0, [pc, #316]	; (80005d4 <main+0x3b4>)
 8000498:	2202      	movs	r2, #2
 800049a:	0019      	movs	r1, r3
 800049c:	f000 fa1a 	bl	80008d4 <sendCAN>

		  uint8_t modeButton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80004a0:	1dfc      	adds	r4, r7, #7
 80004a2:	2390      	movs	r3, #144	; 0x90
 80004a4:	05db      	lsls	r3, r3, #23
 80004a6:	2108      	movs	r1, #8
 80004a8:	0018      	movs	r0, r3
 80004aa:	f002 f9c3 	bl	8002834 <HAL_GPIO_ReadPin>
 80004ae:	0003      	movs	r3, r0
 80004b0:	7023      	strb	r3, [r4, #0]
		  if (modeButton == SET) {
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d11b      	bne.n	80004f2 <main+0x2d2>
			  if (lastState != modeButton) {
 80004ba:	4b47      	ldr	r3, [pc, #284]	; (80005d8 <main+0x3b8>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	1dfa      	adds	r2, r7, #7
 80004c0:	7812      	ldrb	r2, [r2, #0]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d012      	beq.n	80004ec <main+0x2cc>
				  if (stateChanged == 0) {
 80004c6:	4b45      	ldr	r3, [pc, #276]	; (80005dc <main+0x3bc>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d10a      	bne.n	80004e4 <main+0x2c4>
					  if (cruiseOn == 0) {
 80004ce:	4b38      	ldr	r3, [pc, #224]	; (80005b0 <main+0x390>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d103      	bne.n	80004de <main+0x2be>
						  cruiseOn = 1;
 80004d6:	4b36      	ldr	r3, [pc, #216]	; (80005b0 <main+0x390>)
 80004d8:	2201      	movs	r2, #1
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	e002      	b.n	80004e4 <main+0x2c4>
					  } else {
//						  setSpeed = currentSpeed;
						  cruiseOn = 0;
 80004de:	4b34      	ldr	r3, [pc, #208]	; (80005b0 <main+0x390>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
					  }
				  }
				  stateChanged = 1;
 80004e4:	4b3d      	ldr	r3, [pc, #244]	; (80005dc <main+0x3bc>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	e002      	b.n	80004f2 <main+0x2d2>
			  } else {
				  stateChanged = 0;
 80004ec:	4b3b      	ldr	r3, [pc, #236]	; (80005dc <main+0x3bc>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  lastState = modeButton;
 80004f2:	4b39      	ldr	r3, [pc, #228]	; (80005d8 <main+0x3b8>)
 80004f4:	1dfa      	adds	r2, r7, #7
 80004f6:	7812      	ldrb	r2, [r2, #0]
 80004f8:	701a      	strb	r2, [r3, #0]

		  //0x1d2 msg PCM_CRUISE
		  PCM_CRUISE_MSG[0] = (cruiseOn << 5) & 0x20;
 80004fa:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <main+0x390>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	015b      	lsls	r3, r3, #5
 8000500:	b2db      	uxtb	r3, r3
 8000502:	2220      	movs	r2, #32
 8000504:	4013      	ands	r3, r2
 8000506:	b2da      	uxtb	r2, r3
 8000508:	4b35      	ldr	r3, [pc, #212]	; (80005e0 <main+0x3c0>)
 800050a:	701a      	strb	r2, [r3, #0]
		  PCM_CRUISE_MSG[5] = (cruiseOn << 7) & 0x80;
 800050c:	4b28      	ldr	r3, [pc, #160]	; (80005b0 <main+0x390>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	01db      	lsls	r3, r3, #7
 8000512:	b2da      	uxtb	r2, r3
 8000514:	4b32      	ldr	r3, [pc, #200]	; (80005e0 <main+0x3c0>)
 8000516:	715a      	strb	r2, [r3, #5]
		  attachChecksum(0x1D2, 8, PCM_CRUISE_MSG);
 8000518:	4a31      	ldr	r2, [pc, #196]	; (80005e0 <main+0x3c0>)
 800051a:	23e9      	movs	r3, #233	; 0xe9
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	2108      	movs	r1, #8
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fad0 	bl	8000ac6 <attachChecksum>
		  sendCAN(0x1D2, PCM_CRUISE_MSG, 8);
 8000526:	492e      	ldr	r1, [pc, #184]	; (80005e0 <main+0x3c0>)
 8000528:	23e9      	movs	r3, #233	; 0xe9
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	2208      	movs	r2, #8
 800052e:	0018      	movs	r0, r3
 8000530:	f000 f9d0 	bl	80008d4 <sendCAN>
		  //0x1d3 msg PCM_CRUISE_2
		  PCM_CRUISE_2_MSG[1] = ((0x001 << 7) & 0x80) | 0x28;
 8000534:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <main+0x3c4>)
 8000536:	22a8      	movs	r2, #168	; 0xa8
 8000538:	705a      	strb	r2, [r3, #1]
		  PCM_CRUISE_2_MSG[2] = setSpeed;
 800053a:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <main+0x398>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <main+0x3c4>)
 8000542:	709a      	strb	r2, [r3, #2]
		  attachChecksum(0x1D3, 8, PCM_CRUISE_2_MSG);
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <main+0x3c4>)
 8000546:	23d4      	movs	r3, #212	; 0xd4
 8000548:	33ff      	adds	r3, #255	; 0xff
 800054a:	2108      	movs	r1, #8
 800054c:	0018      	movs	r0, r3
 800054e:	f000 faba 	bl	8000ac6 <attachChecksum>
		  sendCAN(0x1D3, PCM_CRUISE_2_MSG, 8);
 8000552:	4924      	ldr	r1, [pc, #144]	; (80005e4 <main+0x3c4>)
 8000554:	23d4      	movs	r3, #212	; 0xd4
 8000556:	33ff      	adds	r3, #255	; 0xff
 8000558:	2208      	movs	r2, #8
 800055a:	0018      	movs	r0, r3
 800055c:	f000 f9ba 	bl	80008d4 <sendCAN>

		  HAL_Delay(50);
 8000560:	2032      	movs	r0, #50	; 0x32
 8000562:	f000 fc6d 	bl	8000e40 <HAL_Delay>
 8000566:	e68c      	b.n	8000282 <main+0x62>
	  } else {
		  LED_OFF();
 8000568:	2390      	movs	r3, #144	; 0x90
 800056a:	05db      	lsls	r3, r3, #23
 800056c:	2200      	movs	r2, #0
 800056e:	2104      	movs	r1, #4
 8000570:	0018      	movs	r0, r3
 8000572:	f002 f97c 	bl	800286e <HAL_GPIO_WritePin>
		  setSpeed = 50;
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <main+0x398>)
 8000578:	2232      	movs	r2, #50	; 0x32
 800057a:	801a      	strh	r2, [r3, #0]
		  cruiseOn = 0;
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <main+0x390>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(500);
 8000582:	23fa      	movs	r3, #250	; 0xfa
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	0018      	movs	r0, r3
 8000588:	f000 fc5a 	bl	8000e40 <HAL_Delay>
	  if (HAL_GetTick() - lastSeen > 500) {
 800058c:	e679      	b.n	8000282 <main+0x62>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	48000400 	.word	0x48000400
 8000594:	2000006c 	.word	0x2000006c
 8000598:	200000c8 	.word	0x200000c8
 800059c:	200000c7 	.word	0x200000c7
 80005a0:	2000002c 	.word	0x2000002c
 80005a4:	00001194 	.word	0x00001194
 80005a8:	200000d0 	.word	0x200000d0
 80005ac:	200000d4 	.word	0x200000d4
 80005b0:	200000c0 	.word	0x200000c0
 80005b4:	200000c2 	.word	0x200000c2
 80005b8:	20000000 	.word	0x20000000
 80005bc:	200000cc 	.word	0x200000cc
 80005c0:	00000a27 	.word	0x00000a27
 80005c4:	00000dac 	.word	0x00000dac
 80005c8:	000009c4 	.word	0x000009c4
 80005cc:	000005dc 	.word	0x000005dc
 80005d0:	200000e4 	.word	0x200000e4
 80005d4:	00000614 	.word	0x00000614
 80005d8:	200000cd 	.word	0x200000cd
 80005dc:	200000ce 	.word	0x200000ce
 80005e0:	200000e8 	.word	0x200000e8
 80005e4:	200000f0 	.word	0x200000f0

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b093      	sub	sp, #76	; 0x4c
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	2414      	movs	r4, #20
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	0018      	movs	r0, r3
 80005f4:	2334      	movs	r3, #52	; 0x34
 80005f6:	001a      	movs	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f002 fe5b 	bl	80032b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	0018      	movs	r0, r3
 8000602:	2310      	movs	r3, #16
 8000604:	001a      	movs	r2, r3
 8000606:	2100      	movs	r1, #0
 8000608:	f002 fe54 	bl	80032b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 800060c:	0021      	movs	r1, r4
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2211      	movs	r2, #17
 8000612:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2201      	movs	r2, #1
 8000618:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2201      	movs	r2, #1
 800061e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2210      	movs	r2, #16
 8000624:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2200      	movs	r2, #0
 800062a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	187b      	adds	r3, r7, r1
 800062e:	0018      	movs	r0, r3
 8000630:	f002 f93a 	bl	80028a8 <HAL_RCC_OscConfig>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000638:	f000 fa65 	bl	8000b06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2207      	movs	r2, #7
 8000640:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2201      	movs	r2, #1
 8000646:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2100      	movs	r1, #0
 8000658:	0018      	movs	r0, r3
 800065a:	f002 fcab 	bl	8002fb4 <HAL_RCC_ClockConfig>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000662:	f000 fa50 	bl	8000b06 <Error_Handler>
  }
}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b013      	add	sp, #76	; 0x4c
 800066c:	bd90      	pop	{r4, r7, pc}
	...

08000670 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	0018      	movs	r0, r3
 800067a:	230c      	movs	r3, #12
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f002 fe18 	bl	80032b4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <MX_ADC_Init+0xb0>)
 8000686:	4a27      	ldr	r2, [pc, #156]	; (8000724 <MX_ADC_Init+0xb4>)
 8000688:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <MX_ADC_Init+0xb0>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <MX_ADC_Init+0xb0>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <MX_ADC_Init+0xb0>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <MX_ADC_Init+0xb0>)
 800069e:	2201      	movs	r2, #1
 80006a0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_ADC_Init+0xb0>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_ADC_Init+0xb0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_ADC_Init+0xb0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_ADC_Init+0xb0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_ADC_Init+0xb0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_ADC_Init+0xb0>)
 80006c2:	22c2      	movs	r2, #194	; 0xc2
 80006c4:	32ff      	adds	r2, #255	; 0xff
 80006c6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_ADC_Init+0xb0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_ADC_Init+0xb0>)
 80006d0:	2224      	movs	r2, #36	; 0x24
 80006d2:	2100      	movs	r1, #0
 80006d4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_ADC_Init+0xb0>)
 80006d8:	2201      	movs	r2, #1
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_ADC_Init+0xb0>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 fbd2 	bl	8000e88 <HAL_ADC_Init>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80006e8:	f000 fa0d 	bl	8000b06 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2204      	movs	r2, #4
 80006f0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0152      	lsls	r2, r2, #5
 80006f8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0552      	lsls	r2, r2, #21
 8000700:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000702:	1d3a      	adds	r2, r7, #4
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_ADC_Init+0xb0>)
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f000 fdf5 	bl	80012f8 <HAL_ADC_ConfigChannel>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000712:	f000 f9f8 	bl	8000b06 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b004      	add	sp, #16
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	2000002c 	.word	0x2000002c
 8000724:	40012400 	.word	0x40012400

08000728 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <MX_CAN_Init+0xa0>)
 800072e:	4a27      	ldr	r2, [pc, #156]	; (80007cc <MX_CAN_Init+0xa4>)
 8000730:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <MX_CAN_Init+0xa0>)
 8000734:	2202      	movs	r2, #2
 8000736:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000738:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <MX_CAN_Init+0xa0>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <MX_CAN_Init+0xa0>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000744:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_CAN_Init+0xa0>)
 8000746:	2290      	movs	r2, #144	; 0x90
 8000748:	0312      	lsls	r2, r2, #12
 800074a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_CAN_Init+0xa0>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_CAN_Init+0xa0>)
 8000754:	2200      	movs	r2, #0
 8000756:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_CAN_Init+0xa0>)
 800075a:	2200      	movs	r2, #0
 800075c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_CAN_Init+0xa0>)
 8000760:	2200      	movs	r2, #0
 8000762:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_CAN_Init+0xa0>)
 8000766:	2201      	movs	r2, #1
 8000768:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_CAN_Init+0xa0>)
 800076c:	2200      	movs	r2, #0
 800076e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_CAN_Init+0xa0>)
 8000772:	2200      	movs	r2, #0
 8000774:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_CAN_Init+0xa0>)
 8000778:	0018      	movs	r0, r3
 800077a:	f000 ff4f 	bl	800161c <HAL_CAN_Init>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000782:	f000 f9c0 	bl	8000b06 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  canfil.FilterMode = CAN_FILTERMODE_IDLIST;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_CAN_Init+0xa8>)
 8000788:	2201      	movs	r2, #1
 800078a:	619a      	str	r2, [r3, #24]
  canfil.FilterScale = CAN_FILTERSCALE_16BIT;
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_CAN_Init+0xa8>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  canfil.FilterIdHigh = 0x001 << 5;
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_CAN_Init+0xa8>)
 8000794:	2220      	movs	r2, #32
 8000796:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow =  0x002 << 5;
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_CAN_Init+0xa8>)
 800079a:	2240      	movs	r2, #64	; 0x40
 800079c:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0x001 << 5;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_CAN_Init+0xa8>)
 80007a0:	2220      	movs	r2, #32
 80007a2:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0x001 << 5;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_CAN_Init+0xa8>)
 80007a6:	2220      	movs	r2, #32
 80007a8:	60da      	str	r2, [r3, #12]
  canfil.FilterFIFOAssignment = 0;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_CAN_Init+0xa8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  canfil.FilterActivation = ENABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_CAN_Init+0xa8>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &canfil);
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <MX_CAN_Init+0xa8>)
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <MX_CAN_Init+0xa0>)
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 f82b 	bl	8001818 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000006c 	.word	0x2000006c
 80007cc:	40006400 	.word	0x40006400
 80007d0:	20000094 	.word	0x20000094

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	240c      	movs	r4, #12
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	0018      	movs	r0, r3
 80007e0:	2314      	movs	r3, #20
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f002 fd65 	bl	80032b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ea:	4b38      	ldr	r3, [pc, #224]	; (80008cc <MX_GPIO_Init+0xf8>)
 80007ec:	695a      	ldr	r2, [r3, #20]
 80007ee:	4b37      	ldr	r3, [pc, #220]	; (80008cc <MX_GPIO_Init+0xf8>)
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	03c9      	lsls	r1, r1, #15
 80007f4:	430a      	orrs	r2, r1
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	4b34      	ldr	r3, [pc, #208]	; (80008cc <MX_GPIO_Init+0xf8>)
 80007fa:	695a      	ldr	r2, [r3, #20]
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	03db      	lsls	r3, r3, #15
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_GPIO_Init+0xf8>)
 8000808:	695a      	ldr	r2, [r3, #20]
 800080a:	4b30      	ldr	r3, [pc, #192]	; (80008cc <MX_GPIO_Init+0xf8>)
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	0289      	lsls	r1, r1, #10
 8000810:	430a      	orrs	r2, r1
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_GPIO_Init+0xf8>)
 8000816:	695a      	ldr	r2, [r3, #20]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	029b      	lsls	r3, r3, #10
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_GPIO_Init+0xf8>)
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_GPIO_Init+0xf8>)
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	02c9      	lsls	r1, r1, #11
 800082c:	430a      	orrs	r2, r1
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_GPIO_Init+0xf8>)
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	02db      	lsls	r3, r3, #11
 8000838:	4013      	ands	r3, r2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800083e:	2390      	movs	r3, #144	; 0x90
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	2200      	movs	r2, #0
 8000844:	2104      	movs	r1, #4
 8000846:	0018      	movs	r0, r3
 8000848:	f002 f811 	bl	800286e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <MX_GPIO_Init+0xfc>)
 800084e:	2200      	movs	r2, #0
 8000850:	2102      	movs	r1, #2
 8000852:	0018      	movs	r0, r3
 8000854:	f002 f80b 	bl	800286e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	220b      	movs	r2, #11
 800085c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	193a      	adds	r2, r7, r4
 800086c:	2390      	movs	r3, #144	; 0x90
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	0011      	movs	r1, r2
 8000872:	0018      	movs	r0, r3
 8000874:	f001 fe76 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2204      	movs	r2, #4
 800087c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2201      	movs	r2, #1
 8000882:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	193a      	adds	r2, r7, r4
 8000892:	2390      	movs	r3, #144	; 0x90
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f001 fe63 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800089e:	0021      	movs	r1, r4
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2202      	movs	r2, #2
 80008a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2201      	movs	r2, #1
 80008aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <MX_GPIO_Init+0xfc>)
 80008bc:	0019      	movs	r1, r3
 80008be:	0010      	movs	r0, r2
 80008c0:	f001 fe50 	bl	8002564 <HAL_GPIO_Init>

}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b009      	add	sp, #36	; 0x24
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000400 	.word	0x48000400

080008d4 <sendCAN>:

/* USER CODE BEGIN 4 */
uint32_t sendCAN(uint16_t id, uint8_t buffer[], uint8_t len) {
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	b08b      	sub	sp, #44	; 0x2c
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6039      	str	r1, [r7, #0]
 80008dc:	0011      	movs	r1, r2
 80008de:	1dbb      	adds	r3, r7, #6
 80008e0:	1c02      	adds	r2, r0, #0
 80008e2:	801a      	strh	r2, [r3, #0]
 80008e4:	1d7b      	adds	r3, r7, #5
 80008e6:	1c0a      	adds	r2, r1, #0
 80008e8:	701a      	strb	r2, [r3, #0]
	CAN_TxHeaderTypeDef header;

	header.IDE = CAN_ID_STD;
 80008ea:	250c      	movs	r5, #12
 80008ec:	197b      	adds	r3, r7, r5
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
	header.RTR = CAN_RTR_DATA;
 80008f2:	197b      	adds	r3, r7, r5
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
	header.TransmitGlobalTime = DISABLE;
 80008f8:	197b      	adds	r3, r7, r5
 80008fa:	2200      	movs	r2, #0
 80008fc:	751a      	strb	r2, [r3, #20]
	header.DLC = len;
 80008fe:	1d7b      	adds	r3, r7, #5
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	197b      	adds	r3, r7, r5
 8000904:	611a      	str	r2, [r3, #16]
	header.StdId = id;
 8000906:	1dbb      	adds	r3, r7, #6
 8000908:	881a      	ldrh	r2, [r3, #0]
 800090a:	197b      	adds	r3, r7, r5
 800090c:	601a      	str	r2, [r3, #0]

	uint32_t mailbox;

	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0) {
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <sendCAN+0xb0>)
 8000910:	0018      	movs	r0, r3
 8000912:	f001 f997 	bl	8001c44 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d01e      	beq.n	8000958 <sendCAN+0x84>
		uint8_t res = HAL_CAN_AddTxMessage(&hcan, &header, buffer, &mailbox);
 800091a:	2627      	movs	r6, #39	; 0x27
 800091c:	19bc      	adds	r4, r7, r6
 800091e:	2308      	movs	r3, #8
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	1979      	adds	r1, r7, r5
 8000926:	4817      	ldr	r0, [pc, #92]	; (8000984 <sendCAN+0xb0>)
 8000928:	f001 f8ae 	bl	8001a88 <HAL_CAN_AddTxMessage>
 800092c:	0003      	movs	r3, r0
 800092e:	7023      	strb	r3, [r4, #0]
		if (res != HAL_OK) {
 8000930:	19bb      	adds	r3, r7, r6
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d007      	beq.n	8000948 <sendCAN+0x74>
			SET_ERROR(0);
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <sendCAN+0xb4>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2201      	movs	r2, #1
 800093e:	4313      	orrs	r3, r2
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <sendCAN+0xb4>)
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	e017      	b.n	8000978 <sendCAN+0xa4>
		} else {
			CLEAR_ERROR(0);
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <sendCAN+0xb4>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2201      	movs	r2, #1
 800094e:	4393      	bics	r3, r2
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <sendCAN+0xb4>)
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	e00f      	b.n	8000978 <sendCAN+0xa4>
		}
	} else {
		if (HAL_CAN_IsTxMessagePending(&hcan, txMailbox)) {
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <sendCAN+0xb8>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <sendCAN+0xb0>)
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f001 f9a7 	bl	8001cb4 <HAL_CAN_IsTxMessagePending>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d006      	beq.n	8000978 <sendCAN+0xa4>
			SET_ERROR(1);
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <sendCAN+0xb4>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2202      	movs	r2, #2
 8000970:	4313      	orrs	r3, r2
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <sendCAN+0xb4>)
 8000976:	701a      	strb	r2, [r3, #0]
		}
	}

	return mailbox;
 8000978:	68bb      	ldr	r3, [r7, #8]
}
 800097a:	0018      	movs	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	b00b      	add	sp, #44	; 0x2c
 8000980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	2000006c 	.word	0x2000006c
 8000988:	200000c6 	.word	0x200000c6
 800098c:	200000bc 	.word	0x200000bc

08000990 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	processCAN(hcan, CAN_RX_FIFO0);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2100      	movs	r1, #0
 800099c:	0018      	movs	r0, r3
 800099e:	f000 f811 	bl	80009c4 <processCAN>
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b002      	add	sp, #8
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
	processCAN(hcan, CAN_RX_FIFO1);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2101      	movs	r1, #1
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f804 	bl	80009c4 <processCAN>
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b002      	add	sp, #8
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <processCAN>:

void processCAN(CAN_HandleTypeDef *hcan, uint32_t mailbox) {
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b08c      	sub	sp, #48	; 0x30
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef tmp;
	uint8_t data[8];
	HAL_CAN_GetRxMessage(hcan, mailbox, &tmp, data);
 80009ce:	240c      	movs	r4, #12
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	2514      	movs	r5, #20
 80009d4:	197a      	adds	r2, r7, r5
 80009d6:	6839      	ldr	r1, [r7, #0]
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f001 f992 	bl	8001d02 <HAL_CAN_GetRxMessage>
	if (tmp.StdId == 0x001) {
 80009de:	197b      	adds	r3, r7, r5
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d116      	bne.n	8000a14 <processCAN+0x50>
		ignition = 1;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <processCAN+0x70>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
		lastSeen = HAL_GetTick();
 80009ec:	f000 fa1e 	bl	8000e2c <HAL_GetTick>
 80009f0:	0002      	movs	r2, r0
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <processCAN+0x74>)
 80009f4:	601a      	str	r2, [r3, #0]
		currentSpeed = data[0];
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <processCAN+0x78>)
 80009fe:	801a      	strh	r2, [r3, #0]
		if (cruiseOn == 0) {
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <processCAN+0x7c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d111      	bne.n	8000a2c <processCAN+0x68>
			setSpeed = data[0];
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <processCAN+0x80>)
 8000a10:	801a      	strh	r2, [r3, #0]
		}
	} else if (tmp.StdId == 0x002) {
		lastSpeed = setSpeed;
		cruiseOn = 0;
	}
}
 8000a12:	e00b      	b.n	8000a2c <processCAN+0x68>
	} else if (tmp.StdId == 0x002) {
 8000a14:	2314      	movs	r3, #20
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d106      	bne.n	8000a2c <processCAN+0x68>
		lastSpeed = setSpeed;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <processCAN+0x80>)
 8000a20:	881a      	ldrh	r2, [r3, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <processCAN+0x84>)
 8000a24:	801a      	strh	r2, [r3, #0]
		cruiseOn = 0;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <processCAN+0x7c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b00c      	add	sp, #48	; 0x30
 8000a32:	bdb0      	pop	{r4, r5, r7, pc}
 8000a34:	200000c7 	.word	0x200000c7
 8000a38:	200000c8 	.word	0x200000c8
 8000a3c:	200000c4 	.word	0x200000c4
 8000a40:	200000c0 	.word	0x200000c0
 8000a44:	20000000 	.word	0x20000000
 8000a48:	200000c2 	.word	0x200000c2

08000a4c <getChecksum>:

int getChecksum(uint8_t *msg, uint8_t len, uint16_t addr) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	0008      	movs	r0, r1
 8000a56:	0011      	movs	r1, r2
 8000a58:	1cfb      	adds	r3, r7, #3
 8000a5a:	1c02      	adds	r2, r0, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	003b      	movs	r3, r7
 8000a60:	1c0a      	adds	r2, r1, #0
 8000a62:	801a      	strh	r2, [r3, #0]
    uint8_t checksum = 0;
 8000a64:	210f      	movs	r1, #15
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
    checksum = ((addr & 0xFF00) >> 8) + (addr & 0x00FF) + len + 1;
 8000a6c:	003b      	movs	r3, r7
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	003b      	movs	r3, r7
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	18d3      	adds	r3, r2, r3
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	1cfb      	adds	r3, r7, #3
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	18d3      	adds	r3, r2, r3
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	3201      	adds	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
    for (int ii = 0; ii < len; ii++) {
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	e00c      	b.n	8000aae <getChecksum+0x62>
        checksum += (msg[ii]);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	18d3      	adds	r3, r2, r3
 8000a9a:	7819      	ldrb	r1, [r3, #0]
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	18bb      	adds	r3, r7, r2
 8000aa0:	18ba      	adds	r2, r7, r2
 8000aa2:	7812      	ldrb	r2, [r2, #0]
 8000aa4:	188a      	adds	r2, r1, r2
 8000aa6:	701a      	strb	r2, [r3, #0]
    for (int ii = 0; ii < len; ii++) {
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	1cfb      	adds	r3, r7, #3
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbed      	blt.n	8000a94 <getChecksum+0x48>
    }
    return checksum;
 8000ab8:	230f      	movs	r3, #15
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	781b      	ldrb	r3, [r3, #0]
}
 8000abe:	0018      	movs	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b004      	add	sp, #16
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <attachChecksum>:

void attachChecksum(uint16_t id, uint8_t len, uint8_t *msg) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	603a      	str	r2, [r7, #0]
 8000ace:	1dbb      	adds	r3, r7, #6
 8000ad0:	1c02      	adds	r2, r0, #0
 8000ad2:	801a      	strh	r2, [r3, #0]
 8000ad4:	1d7b      	adds	r3, r7, #5
 8000ad6:	1c0a      	adds	r2, r1, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
    msg[len -1] = getChecksum(msg, len - 1, id);
 8000ada:	1d7b      	adds	r3, r7, #5
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	b2d9      	uxtb	r1, r3
 8000ae2:	1dbb      	adds	r3, r7, #6
 8000ae4:	881a      	ldrh	r2, [r3, #0]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff ffaf 	bl	8000a4c <getChecksum>
 8000aee:	0001      	movs	r1, r0
 8000af0:	1d7b      	adds	r3, r7, #5
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	b2ca      	uxtb	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0a:	b672      	cpsid	i
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_MspInit+0x50>)
 8000b18:	699a      	ldr	r2, [r3, #24]
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_MspInit+0x50>)
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	619a      	str	r2, [r3, #24]
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_MspInit+0x50>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	2201      	movs	r2, #1
 8000b28:	4013      	ands	r3, r2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_MspInit+0x50>)
 8000b30:	69da      	ldr	r2, [r3, #28]
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_MspInit+0x50>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0549      	lsls	r1, r1, #21
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	61da      	str	r2, [r3, #28]
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_MspInit+0x50>)
 8000b3e:	69da      	ldr	r2, [r3, #28]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	055b      	lsls	r3, r3, #21
 8000b44:	4013      	ands	r3, r2
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x54>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_MspInit+0x54>)
 8000b50:	2110      	movs	r1, #16
 8000b52:	430a      	orrs	r2, r1
 8000b54:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010000 	.word	0x40010000

08000b68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b08b      	sub	sp, #44	; 0x2c
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	2414      	movs	r4, #20
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	0018      	movs	r0, r3
 8000b76:	2314      	movs	r3, #20
 8000b78:	001a      	movs	r2, r3
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f002 fb9a 	bl	80032b4 <memset>
  if(hadc->Instance==ADC1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <HAL_ADC_MspInit+0x84>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12b      	bne.n	8000be2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_ADC_MspInit+0x88>)
 8000b8c:	699a      	ldr	r2, [r3, #24]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_ADC_MspInit+0x88>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	0089      	lsls	r1, r1, #2
 8000b94:	430a      	orrs	r2, r1
 8000b96:	619a      	str	r2, [r3, #24]
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_ADC_MspInit+0x88>)
 8000b9a:	699a      	ldr	r2, [r3, #24]
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_ADC_MspInit+0x88>)
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_ADC_MspInit+0x88>)
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	0289      	lsls	r1, r1, #10
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	615a      	str	r2, [r3, #20]
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_ADC_MspInit+0x88>)
 8000bb6:	695a      	ldr	r2, [r3, #20]
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	029b      	lsls	r3, r3, #10
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2210      	movs	r2, #16
 8000bc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2203      	movs	r2, #3
 8000bcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	193a      	adds	r2, r7, r4
 8000bd6:	2390      	movs	r3, #144	; 0x90
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	0011      	movs	r1, r2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 fcc1 	bl	8002564 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b00b      	add	sp, #44	; 0x2c
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40012400 	.word	0x40012400
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b08b      	sub	sp, #44	; 0x2c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	2414      	movs	r4, #20
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	0018      	movs	r0, r3
 8000c02:	2314      	movs	r3, #20
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f002 fb54 	bl	80032b4 <memset>
  if(hcan->Instance==CAN)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <HAL_CAN_MspInit+0xa4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d13b      	bne.n	8000c8e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <HAL_CAN_MspInit+0xa8>)
 8000c18:	69da      	ldr	r2, [r3, #28]
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <HAL_CAN_MspInit+0xa8>)
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	0489      	lsls	r1, r1, #18
 8000c20:	430a      	orrs	r2, r1
 8000c22:	61da      	str	r2, [r3, #28]
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <HAL_CAN_MspInit+0xa8>)
 8000c26:	69da      	ldr	r2, [r3, #28]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	049b      	lsls	r3, r3, #18
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <HAL_CAN_MspInit+0xa8>)
 8000c34:	695a      	ldr	r2, [r3, #20]
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_CAN_MspInit+0xa8>)
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	0289      	lsls	r1, r1, #10
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_CAN_MspInit+0xa8>)
 8000c42:	695a      	ldr	r2, [r3, #20]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	029b      	lsls	r3, r3, #10
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	22c0      	movs	r2, #192	; 0xc0
 8000c52:	0152      	lsls	r2, r2, #5
 8000c54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	0021      	movs	r1, r4
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2203      	movs	r2, #3
 8000c68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	187a      	adds	r2, r7, r1
 8000c72:	2390      	movs	r3, #144	; 0x90
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f001 fc73 	bl	8002564 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	201e      	movs	r0, #30
 8000c84:	f001 fc3c 	bl	8002500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000c88:	201e      	movs	r0, #30
 8000c8a:	f001 fc4e 	bl	800252a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b00b      	add	sp, #44	; 0x2c
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	40006400 	.word	0x40006400
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVC_IRQn 0 */
  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc4:	f000 f8a0 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <CEC_CAN_IRQHandler+0x14>)
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f001 f959 	bl	8001f8e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	2000006c 	.word	0x2000006c

08000ce8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cf4:	4813      	ldr	r0, [pc, #76]	; (8000d44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cf6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000cf8:	4813      	ldr	r0, [pc, #76]	; (8000d48 <LoopForever+0x6>)
    LDR R1, [R0]
 8000cfa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000cfc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000cfe:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <LoopForever+0xa>)
    CMP R1, R2
 8000d00:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d02:	d105      	bne.n	8000d10 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d06:	4913      	ldr	r1, [pc, #76]	; (8000d54 <LoopForever+0x12>)
    STR R1, [R0]
 8000d08:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d0a:	4813      	ldr	r0, [pc, #76]	; (8000d58 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000d0c:	4913      	ldr	r1, [pc, #76]	; (8000d5c <LoopForever+0x1a>)
    STR R1, [R0]
 8000d0e:	6001      	str	r1, [r0, #0]

08000d10 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	4813      	ldr	r0, [pc, #76]	; (8000d60 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000d12:	4914      	ldr	r1, [pc, #80]	; (8000d64 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000d14:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <LoopForever+0x26>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000d28:	4c11      	ldr	r4, [pc, #68]	; (8000d70 <LoopForever+0x2e>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d36:	f7ff ffd7 	bl	8000ce8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d3a:	f002 fa97 	bl	800326c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3e:	f7ff fa6f 	bl	8000220 <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   r0, =_estack
 8000d44:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000d48:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000d4c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000d50:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000d54:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000d58:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000d5c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d68:	08003314 	.word	0x08003314
  ldr r2, =_sbss
 8000d6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d70:	200000fc 	.word	0x200000fc

08000d74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_IRQHandler>
	...

08000d78 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <HAL_Init+0x24>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_Init+0x24>)
 8000d82:	2110      	movs	r1, #16
 8000d84:	430a      	orrs	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f809 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8e:	f7ff febf 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40022000 	.word	0x40022000

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_InitTick+0x5c>)
 8000daa:	681c      	ldr	r4, [r3, #0]
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_InitTick+0x60>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	0019      	movs	r1, r3
 8000db2:	23fa      	movs	r3, #250	; 0xfa
 8000db4:	0098      	lsls	r0, r3, #2
 8000db6:	f7ff f9a7 	bl	8000108 <__udivsi3>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	0020      	movs	r0, r4
 8000dc0:	f7ff f9a2 	bl	8000108 <__udivsi3>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f001 fbbf 	bl	800254a <HAL_SYSTICK_Config>
 8000dcc:	1e03      	subs	r3, r0, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e00f      	b.n	8000df4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d80b      	bhi.n	8000df2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	425b      	negs	r3, r3
 8000de0:	2200      	movs	r2, #0
 8000de2:	0018      	movs	r0, r3
 8000de4:	f001 fb8c 	bl	8002500 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_InitTick+0x64>)
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	0018      	movs	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b003      	add	sp, #12
 8000dfa:	bd90      	pop	{r4, r7, pc}
 8000dfc:	20000004 	.word	0x20000004
 8000e00:	2000000c 	.word	0x2000000c
 8000e04:	20000008 	.word	0x20000008

08000e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_IncTick+0x1c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	001a      	movs	r2, r3
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_IncTick+0x20>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	18d2      	adds	r2, r2, r3
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_IncTick+0x20>)
 8000e1a:	601a      	str	r2, [r3, #0]
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	2000000c 	.word	0x2000000c
 8000e28:	200000f8 	.word	0x200000f8

08000e2c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b02      	ldr	r3, [pc, #8]	; (8000e3c <HAL_GetTick+0x10>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	200000f8 	.word	0x200000f8

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff fff0 	bl	8000e2c <HAL_GetTick>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	3301      	adds	r3, #1
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	001a      	movs	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	189b      	adds	r3, r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	f7ff ffe0 	bl	8000e2c <HAL_GetTick>
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b004      	add	sp, #16
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	2000000c 	.word	0x2000000c

08000e88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e90:	230f      	movs	r3, #15
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e125      	b.n	80010f2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10a      	bne.n	8000ec4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2234      	movs	r2, #52	; 0x34
 8000eb8:	2100      	movs	r1, #0
 8000eba:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff fe52 	bl	8000b68 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec8:	2210      	movs	r2, #16
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d000      	beq.n	8000ed0 <HAL_ADC_Init+0x48>
 8000ece:	e103      	b.n	80010d8 <HAL_ADC_Init+0x250>
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d000      	beq.n	8000edc <HAL_ADC_Init+0x54>
 8000eda:	e0fd      	b.n	80010d8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000ee6:	d000      	beq.n	8000eea <HAL_ADC_Init+0x62>
 8000ee8:	e0f6      	b.n	80010d8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eee:	4a83      	ldr	r2, [pc, #524]	; (80010fc <HAL_ADC_Init+0x274>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	2203      	movs	r2, #3
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d112      	bne.n	8000f2e <HAL_ADC_Init+0xa6>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d009      	beq.n	8000f2a <HAL_ADC_Init+0xa2>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	401a      	ands	r2, r3
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d101      	bne.n	8000f2e <HAL_ADC_Init+0xa6>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <HAL_ADC_Init+0xa8>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d116      	bne.n	8000f62 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	2218      	movs	r2, #24
 8000f3c:	4393      	bics	r3, r2
 8000f3e:	0019      	movs	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	0899      	lsrs	r1, r3, #2
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4964      	ldr	r1, [pc, #400]	; (8001100 <HAL_ADC_Init+0x278>)
 8000f6e:	400a      	ands	r2, r1
 8000f70:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7e1b      	ldrb	r3, [r3, #24]
 8000f76:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7e5b      	ldrb	r3, [r3, #25]
 8000f7c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f7e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7e9b      	ldrb	r3, [r3, #26]
 8000f84:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f86:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d002      	beq.n	8000f96 <HAL_ADC_Init+0x10e>
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	015b      	lsls	r3, r3, #5
 8000f94:	e000      	b.n	8000f98 <HAL_ADC_Init+0x110>
 8000f96:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f98:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f9e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d101      	bne.n	8000fac <HAL_ADC_Init+0x124>
 8000fa8:	2304      	movs	r3, #4
 8000faa:	e000      	b.n	8000fae <HAL_ADC_Init+0x126>
 8000fac:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000fae:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2124      	movs	r1, #36	; 0x24
 8000fb4:	5c5b      	ldrb	r3, [r3, r1]
 8000fb6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000fb8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7edb      	ldrb	r3, [r3, #27]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d115      	bne.n	8000ff4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7e9b      	ldrb	r3, [r3, #26]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d105      	bne.n	8000fdc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2280      	movs	r2, #128	; 0x80
 8000fd4:	0252      	lsls	r2, r2, #9
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	e00b      	b.n	8000ff4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fec:	2201      	movs	r2, #1
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69da      	ldr	r2, [r3, #28]
 8000ff8:	23c2      	movs	r3, #194	; 0xc2
 8000ffa:	33ff      	adds	r3, #255	; 0xff
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d007      	beq.n	8001010 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001008:	4313      	orrs	r3, r2
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	4313      	orrs	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68d9      	ldr	r1, [r3, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	430a      	orrs	r2, r1
 800101e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	055b      	lsls	r3, r3, #21
 8001028:	429a      	cmp	r2, r3
 800102a:	d01b      	beq.n	8001064 <HAL_ADC_Init+0x1dc>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	2b01      	cmp	r3, #1
 8001032:	d017      	beq.n	8001064 <HAL_ADC_Init+0x1dc>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	2b02      	cmp	r3, #2
 800103a:	d013      	beq.n	8001064 <HAL_ADC_Init+0x1dc>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	2b03      	cmp	r3, #3
 8001042:	d00f      	beq.n	8001064 <HAL_ADC_Init+0x1dc>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001048:	2b04      	cmp	r3, #4
 800104a:	d00b      	beq.n	8001064 <HAL_ADC_Init+0x1dc>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	2b05      	cmp	r3, #5
 8001052:	d007      	beq.n	8001064 <HAL_ADC_Init+0x1dc>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001058:	2b06      	cmp	r3, #6
 800105a:	d003      	beq.n	8001064 <HAL_ADC_Init+0x1dc>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001060:	2b07      	cmp	r3, #7
 8001062:	d112      	bne.n	800108a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2107      	movs	r1, #7
 8001070:	438a      	bics	r2, r1
 8001072:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6959      	ldr	r1, [r3, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	2207      	movs	r2, #7
 8001080:	401a      	ands	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	430a      	orrs	r2, r1
 8001088:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <HAL_ADC_Init+0x27c>)
 8001092:	4013      	ands	r3, r2
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	429a      	cmp	r2, r3
 8001098:	d10b      	bne.n	80010b2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a4:	2203      	movs	r2, #3
 80010a6:	4393      	bics	r3, r2
 80010a8:	2201      	movs	r2, #1
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010b0:	e01c      	b.n	80010ec <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b6:	2212      	movs	r2, #18
 80010b8:	4393      	bics	r3, r2
 80010ba:	2210      	movs	r2, #16
 80010bc:	431a      	orrs	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c6:	2201      	movs	r2, #1
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80010ce:	230f      	movs	r3, #15
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010d6:	e009      	b.n	80010ec <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010dc:	2210      	movs	r2, #16
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80010e4:	230f      	movs	r3, #15
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010ec:	230f      	movs	r3, #15
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	781b      	ldrb	r3, [r3, #0]
}
 80010f2:	0018      	movs	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b004      	add	sp, #16
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	fffffefd 	.word	0xfffffefd
 8001100:	fffe0219 	.word	0xfffe0219
 8001104:	833fffe7 	.word	0x833fffe7

08001108 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001110:	230f      	movs	r3, #15
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2204      	movs	r2, #4
 8001120:	4013      	ands	r3, r2
 8001122:	d138      	bne.n	8001196 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2234      	movs	r2, #52	; 0x34
 8001128:	5c9b      	ldrb	r3, [r3, r2]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d101      	bne.n	8001132 <HAL_ADC_Start+0x2a>
 800112e:	2302      	movs	r3, #2
 8001130:	e038      	b.n	80011a4 <HAL_ADC_Start+0x9c>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2234      	movs	r2, #52	; 0x34
 8001136:	2101      	movs	r1, #1
 8001138:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7e5b      	ldrb	r3, [r3, #25]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d007      	beq.n	8001152 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001142:	230f      	movs	r3, #15
 8001144:	18fc      	adds	r4, r7, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	0018      	movs	r0, r3
 800114a:	f000 f9e3 	bl	8001514 <ADC_Enable>
 800114e:	0003      	movs	r3, r0
 8001150:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001152:	230f      	movs	r3, #15
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d120      	bne.n	800119e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <HAL_ADC_Start+0xa4>)
 8001162:	4013      	ands	r3, r2
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	0052      	lsls	r2, r2, #1
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2234      	movs	r2, #52	; 0x34
 8001178:	2100      	movs	r1, #0
 800117a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	221c      	movs	r2, #28
 8001182:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2104      	movs	r1, #4
 8001190:	430a      	orrs	r2, r1
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	e003      	b.n	800119e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001196:	230f      	movs	r3, #15
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	2202      	movs	r2, #2
 800119c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800119e:	230f      	movs	r3, #15
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	781b      	ldrb	r3, [r3, #0]
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b005      	add	sp, #20
 80011aa:	bd90      	pop	{r4, r7, pc}
 80011ac:	fffff0fe 	.word	0xfffff0fe

080011b0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d102      	bne.n	80011c8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80011c2:	2308      	movs	r3, #8
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	e014      	b.n	80011f2 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	2201      	movs	r2, #1
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d10b      	bne.n	80011ee <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011da:	2220      	movs	r2, #32
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2234      	movs	r2, #52	; 0x34
 80011e6:	2100      	movs	r1, #0
 80011e8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e071      	b.n	80012d2 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80011ee:	230c      	movs	r3, #12
 80011f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80011f2:	f7ff fe1b 	bl	8000e2c <HAL_GetTick>
 80011f6:	0003      	movs	r3, r0
 80011f8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80011fa:	e01f      	b.n	800123c <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	d01c      	beq.n	800123c <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d007      	beq.n	8001218 <HAL_ADC_PollForConversion+0x68>
 8001208:	f7ff fe10 	bl	8000e2c <HAL_GetTick>
 800120c:	0002      	movs	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d211      	bcs.n	800123c <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	4013      	ands	r3, r2
 8001222:	d10b      	bne.n	800123c <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001228:	2204      	movs	r2, #4
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2234      	movs	r2, #52	; 0x34
 8001234:	2100      	movs	r1, #0
 8001236:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e04a      	b.n	80012d2 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	4013      	ands	r3, r2
 8001246:	d0d9      	beq.n	80011fc <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	23c0      	movs	r3, #192	; 0xc0
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4013      	ands	r3, r2
 8001262:	d12d      	bne.n	80012c0 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001268:	2b00      	cmp	r3, #0
 800126a:	d129      	bne.n	80012c0 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2208      	movs	r2, #8
 8001274:	4013      	ands	r3, r2
 8001276:	2b08      	cmp	r3, #8
 8001278:	d122      	bne.n	80012c0 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2204      	movs	r2, #4
 8001282:	4013      	ands	r3, r2
 8001284:	d110      	bne.n	80012a8 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	210c      	movs	r1, #12
 8001292:	438a      	bics	r2, r1
 8001294:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129a:	4a10      	ldr	r2, [pc, #64]	; (80012dc <HAL_ADC_PollForConversion+0x12c>)
 800129c:	4013      	ands	r3, r2
 800129e:	2201      	movs	r2, #1
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	639a      	str	r2, [r3, #56]	; 0x38
 80012a6:	e00b      	b.n	80012c0 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ac:	2220      	movs	r2, #32
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b8:	2201      	movs	r2, #1
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7e1b      	ldrb	r3, [r3, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d103      	bne.n	80012d0 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	220c      	movs	r2, #12
 80012ce:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b004      	add	sp, #16
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	fffffefe 	.word	0xfffffefe

080012e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b002      	add	sp, #8
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001302:	230f      	movs	r3, #15
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	055b      	lsls	r3, r3, #21
 8001316:	429a      	cmp	r2, r3
 8001318:	d011      	beq.n	800133e <HAL_ADC_ConfigChannel+0x46>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	2b01      	cmp	r3, #1
 8001320:	d00d      	beq.n	800133e <HAL_ADC_ConfigChannel+0x46>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	2b02      	cmp	r3, #2
 8001328:	d009      	beq.n	800133e <HAL_ADC_ConfigChannel+0x46>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132e:	2b03      	cmp	r3, #3
 8001330:	d005      	beq.n	800133e <HAL_ADC_ConfigChannel+0x46>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001336:	2b04      	cmp	r3, #4
 8001338:	d001      	beq.n	800133e <HAL_ADC_ConfigChannel+0x46>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2234      	movs	r2, #52	; 0x34
 8001342:	5c9b      	ldrb	r3, [r3, r2]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_ADC_ConfigChannel+0x54>
 8001348:	2302      	movs	r3, #2
 800134a:	e0d0      	b.n	80014ee <HAL_ADC_ConfigChannel+0x1f6>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2234      	movs	r2, #52	; 0x34
 8001350:	2101      	movs	r1, #1
 8001352:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2204      	movs	r2, #4
 800135c:	4013      	ands	r3, r2
 800135e:	d000      	beq.n	8001362 <HAL_ADC_ConfigChannel+0x6a>
 8001360:	e0b4      	b.n	80014cc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a64      	ldr	r2, [pc, #400]	; (80014f8 <HAL_ADC_ConfigChannel+0x200>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d100      	bne.n	800136e <HAL_ADC_ConfigChannel+0x76>
 800136c:	e082      	b.n	8001474 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2201      	movs	r2, #1
 800137a:	409a      	lsls	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	055b      	lsls	r3, r3, #21
 800138c:	429a      	cmp	r2, r3
 800138e:	d037      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x108>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	2b01      	cmp	r3, #1
 8001396:	d033      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x108>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	2b02      	cmp	r3, #2
 800139e:	d02f      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x108>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d02b      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x108>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d027      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x108>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	d023      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x108>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	2b06      	cmp	r3, #6
 80013be:	d01f      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x108>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	2b07      	cmp	r3, #7
 80013c6:	d01b      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2107      	movs	r1, #7
 80013d4:	400b      	ands	r3, r1
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d012      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695a      	ldr	r2, [r3, #20]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2107      	movs	r1, #7
 80013e6:	438a      	bics	r2, r1
 80013e8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6959      	ldr	r1, [r3, #20]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2207      	movs	r2, #7
 80013f6:	401a      	ands	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b10      	cmp	r3, #16
 8001406:	d007      	beq.n	8001418 <HAL_ADC_ConfigChannel+0x120>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b11      	cmp	r3, #17
 800140e:	d003      	beq.n	8001418 <HAL_ADC_ConfigChannel+0x120>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b12      	cmp	r3, #18
 8001416:	d163      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <HAL_ADC_ConfigChannel+0x204>)
 800141a:	6819      	ldr	r1, [r3, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b10      	cmp	r3, #16
 8001422:	d009      	beq.n	8001438 <HAL_ADC_ConfigChannel+0x140>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b11      	cmp	r3, #17
 800142a:	d102      	bne.n	8001432 <HAL_ADC_ConfigChannel+0x13a>
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	03db      	lsls	r3, r3, #15
 8001430:	e004      	b.n	800143c <HAL_ADC_ConfigChannel+0x144>
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	045b      	lsls	r3, r3, #17
 8001436:	e001      	b.n	800143c <HAL_ADC_ConfigChannel+0x144>
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	041b      	lsls	r3, r3, #16
 800143c:	4a2f      	ldr	r2, [pc, #188]	; (80014fc <HAL_ADC_ConfigChannel+0x204>)
 800143e:	430b      	orrs	r3, r1
 8001440:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b10      	cmp	r3, #16
 8001448:	d14a      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800144a:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <HAL_ADC_ConfigChannel+0x208>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	492d      	ldr	r1, [pc, #180]	; (8001504 <HAL_ADC_ConfigChannel+0x20c>)
 8001450:	0018      	movs	r0, r3
 8001452:	f7fe fe59 	bl	8000108 <__udivsi3>
 8001456:	0003      	movs	r3, r0
 8001458:	001a      	movs	r2, r3
 800145a:	0013      	movs	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	189b      	adds	r3, r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001464:	e002      	b.n	800146c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	3b01      	subs	r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f9      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x16e>
 8001472:	e035      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2101      	movs	r1, #1
 8001480:	4099      	lsls	r1, r3
 8001482:	000b      	movs	r3, r1
 8001484:	43d9      	mvns	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	400a      	ands	r2, r1
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b10      	cmp	r3, #16
 8001494:	d007      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x1ae>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b11      	cmp	r3, #17
 800149c:	d003      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x1ae>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b12      	cmp	r3, #18
 80014a4:	d11c      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_ADC_ConfigChannel+0x204>)
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b10      	cmp	r3, #16
 80014b0:	d007      	beq.n	80014c2 <HAL_ADC_ConfigChannel+0x1ca>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b11      	cmp	r3, #17
 80014b8:	d101      	bne.n	80014be <HAL_ADC_ConfigChannel+0x1c6>
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_ADC_ConfigChannel+0x210>)
 80014bc:	e002      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x1cc>
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_ADC_ConfigChannel+0x214>)
 80014c0:	e000      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x1cc>
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_ADC_ConfigChannel+0x218>)
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_ADC_ConfigChannel+0x204>)
 80014c6:	400b      	ands	r3, r1
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e009      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d0:	2220      	movs	r2, #32
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80014d8:	230f      	movs	r3, #15
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2234      	movs	r2, #52	; 0x34
 80014e4:	2100      	movs	r1, #0
 80014e6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80014e8:	230f      	movs	r3, #15
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	781b      	ldrb	r3, [r3, #0]
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	00001001 	.word	0x00001001
 80014fc:	40012708 	.word	0x40012708
 8001500:	20000004 	.word	0x20000004
 8001504:	000f4240 	.word	0x000f4240
 8001508:	ffbfffff 	.word	0xffbfffff
 800150c:	feffffff 	.word	0xfeffffff
 8001510:	ff7fffff 	.word	0xff7fffff

08001514 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2203      	movs	r2, #3
 800152c:	4013      	ands	r3, r2
 800152e:	2b01      	cmp	r3, #1
 8001530:	d112      	bne.n	8001558 <ADC_Enable+0x44>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2201      	movs	r2, #1
 800153a:	4013      	ands	r3, r2
 800153c:	2b01      	cmp	r3, #1
 800153e:	d009      	beq.n	8001554 <ADC_Enable+0x40>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	401a      	ands	r2, r3
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	429a      	cmp	r2, r3
 8001552:	d101      	bne.n	8001558 <ADC_Enable+0x44>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <ADC_Enable+0x46>
 8001558:	2300      	movs	r3, #0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d152      	bne.n	8001604 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <ADC_Enable+0xfc>)
 8001566:	4013      	ands	r3, r2
 8001568:	d00d      	beq.n	8001586 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156e:	2210      	movs	r2, #16
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157a:	2201      	movs	r2, #1
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e03f      	b.n	8001606 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	430a      	orrs	r2, r1
 8001594:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <ADC_Enable+0x100>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	491f      	ldr	r1, [pc, #124]	; (8001618 <ADC_Enable+0x104>)
 800159c:	0018      	movs	r0, r3
 800159e:	f7fe fdb3 	bl	8000108 <__udivsi3>
 80015a2:	0003      	movs	r3, r0
 80015a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015a6:	e002      	b.n	80015ae <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f9      	bne.n	80015a8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80015b4:	f7ff fc3a 	bl	8000e2c <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015bc:	e01b      	b.n	80015f6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015be:	f7ff fc35 	bl	8000e2c <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d914      	bls.n	80015f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2201      	movs	r2, #1
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d00d      	beq.n	80015f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015de:	2210      	movs	r2, #16
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ea:	2201      	movs	r2, #1
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e007      	b.n	8001606 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4013      	ands	r3, r2
 8001600:	2b01      	cmp	r3, #1
 8001602:	d1dc      	bne.n	80015be <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b004      	add	sp, #16
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	80000017 	.word	0x80000017
 8001614:	20000004 	.word	0x20000004
 8001618:	000f4240 	.word	0x000f4240

0800161c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e0f0      	b.n	8001810 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2220      	movs	r2, #32
 8001632:	5c9b      	ldrb	r3, [r3, r2]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d103      	bne.n	8001642 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff fad9 	bl	8000bf4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2101      	movs	r1, #1
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001652:	f7ff fbeb 	bl	8000e2c <HAL_GetTick>
 8001656:	0003      	movs	r3, r0
 8001658:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800165a:	e013      	b.n	8001684 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800165c:	f7ff fbe6 	bl	8000e2c <HAL_GetTick>
 8001660:	0002      	movs	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b0a      	cmp	r3, #10
 8001668:	d90c      	bls.n	8001684 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	2280      	movs	r2, #128	; 0x80
 8001670:	0292      	lsls	r2, r2, #10
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2220      	movs	r2, #32
 800167c:	2105      	movs	r1, #5
 800167e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0c5      	b.n	8001810 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	4013      	ands	r3, r2
 800168e:	d0e5      	beq.n	800165c <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2102      	movs	r1, #2
 800169c:	438a      	bics	r2, r1
 800169e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a0:	f7ff fbc4 	bl	8000e2c <HAL_GetTick>
 80016a4:	0003      	movs	r3, r0
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016a8:	e013      	b.n	80016d2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016aa:	f7ff fbbf 	bl	8000e2c <HAL_GetTick>
 80016ae:	0002      	movs	r2, r0
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b0a      	cmp	r3, #10
 80016b6:	d90c      	bls.n	80016d2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	0292      	lsls	r2, r2, #10
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2220      	movs	r2, #32
 80016ca:	2105      	movs	r1, #5
 80016cc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e09e      	b.n	8001810 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2202      	movs	r2, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d1e5      	bne.n	80016aa <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7e1b      	ldrb	r3, [r3, #24]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e007      	b.n	8001708 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	438a      	bics	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e5b      	ldrb	r3, [r3, #25]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d108      	bne.n	8001722 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2140      	movs	r1, #64	; 0x40
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	e007      	b.n	8001732 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2140      	movs	r1, #64	; 0x40
 800172e:	438a      	bics	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7e9b      	ldrb	r3, [r3, #26]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d108      	bne.n	800174c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2120      	movs	r1, #32
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e007      	b.n	800175c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2120      	movs	r1, #32
 8001758:	438a      	bics	r2, r1
 800175a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7edb      	ldrb	r3, [r3, #27]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d108      	bne.n	8001776 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2110      	movs	r1, #16
 8001770:	438a      	bics	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	e007      	b.n	8001786 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2110      	movs	r1, #16
 8001782:	430a      	orrs	r2, r1
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7f1b      	ldrb	r3, [r3, #28]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2108      	movs	r1, #8
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e007      	b.n	80017b0 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2108      	movs	r1, #8
 80017ac:	438a      	bics	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7f5b      	ldrb	r3, [r3, #29]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d108      	bne.n	80017ca <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2104      	movs	r1, #4
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e007      	b.n	80017da <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2104      	movs	r1, #4
 80017d6:	438a      	bics	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	0011      	movs	r1, r2
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	1e5a      	subs	r2, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2220      	movs	r2, #32
 800180a:	2101      	movs	r1, #1
 800180c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b004      	add	sp, #16
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001828:	2013      	movs	r0, #19
 800182a:	183b      	adds	r3, r7, r0
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	2120      	movs	r1, #32
 8001830:	5c52      	ldrb	r2, [r2, r1]
 8001832:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001834:	0002      	movs	r2, r0
 8001836:	18bb      	adds	r3, r7, r2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d004      	beq.n	8001848 <HAL_CAN_ConfigFilter+0x30>
 800183e:	18bb      	adds	r3, r7, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d000      	beq.n	8001848 <HAL_CAN_ConfigFilter+0x30>
 8001846:	e0cd      	b.n	80019e4 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	58d3      	ldr	r3, [r2, r3]
 8001850:	2201      	movs	r2, #1
 8001852:	431a      	orrs	r2, r3
 8001854:	0011      	movs	r1, r2
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	221f      	movs	r2, #31
 8001864:	4013      	ands	r3, r2
 8001866:	2201      	movs	r2, #1
 8001868:	409a      	lsls	r2, r3
 800186a:	0013      	movs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	2387      	movs	r3, #135	; 0x87
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	58d3      	ldr	r3, [r2, r3]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	43d2      	mvns	r2, r2
 800187a:	401a      	ands	r2, r3
 800187c:	0011      	movs	r1, r2
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	2387      	movs	r3, #135	; 0x87
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d129      	bne.n	80018e2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	2383      	movs	r3, #131	; 0x83
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	58d3      	ldr	r3, [r2, r3]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	43d2      	mvns	r2, r2
 800189a:	401a      	ands	r2, r3
 800189c:	0011      	movs	r1, r2
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	2383      	movs	r3, #131	; 0x83
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018b8:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3248      	adds	r2, #72	; 0x48
 80018be:	00d2      	lsls	r2, r2, #3
 80018c0:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018d6:	6979      	ldr	r1, [r7, #20]
 80018d8:	3348      	adds	r3, #72	; 0x48
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	18cb      	adds	r3, r1, r3
 80018de:	3304      	adds	r3, #4
 80018e0:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d128      	bne.n	800193c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	2383      	movs	r3, #131	; 0x83
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	58d2      	ldr	r2, [r2, r3]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	0011      	movs	r1, r2
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	2383      	movs	r3, #131	; 0x83
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	041b      	lsls	r3, r3, #16
 800190c:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001912:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3248      	adds	r2, #72	; 0x48
 8001918:	00d2      	lsls	r2, r2, #3
 800191a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	041b      	lsls	r3, r3, #16
 8001928:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800192e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001930:	6979      	ldr	r1, [r7, #20]
 8001932:	3348      	adds	r3, #72	; 0x48
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	18cb      	adds	r3, r1, r3
 8001938:	3304      	adds	r3, #4
 800193a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10c      	bne.n	800195e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	2381      	movs	r3, #129	; 0x81
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	58d3      	ldr	r3, [r2, r3]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	43d2      	mvns	r2, r2
 8001950:	401a      	ands	r2, r3
 8001952:	0011      	movs	r1, r2
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	2381      	movs	r3, #129	; 0x81
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	50d1      	str	r1, [r2, r3]
 800195c:	e00a      	b.n	8001974 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	2381      	movs	r3, #129	; 0x81
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	58d2      	ldr	r2, [r2, r3]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	431a      	orrs	r2, r3
 800196a:	0011      	movs	r1, r2
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	2381      	movs	r3, #129	; 0x81
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10c      	bne.n	8001996 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	2385      	movs	r3, #133	; 0x85
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	58d3      	ldr	r3, [r2, r3]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	43d2      	mvns	r2, r2
 8001988:	401a      	ands	r2, r3
 800198a:	0011      	movs	r1, r2
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	2385      	movs	r3, #133	; 0x85
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	50d1      	str	r1, [r2, r3]
 8001994:	e00a      	b.n	80019ac <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	2385      	movs	r3, #133	; 0x85
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	58d2      	ldr	r2, [r2, r3]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	0011      	movs	r1, r2
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	2385      	movs	r3, #133	; 0x85
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d10a      	bne.n	80019ca <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	2387      	movs	r3, #135	; 0x87
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	58d2      	ldr	r2, [r2, r3]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	431a      	orrs	r2, r3
 80019c0:	0011      	movs	r1, r2
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	2387      	movs	r3, #135	; 0x87
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	58d3      	ldr	r3, [r2, r3]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4393      	bics	r3, r2
 80019d6:	0019      	movs	r1, r3
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e007      	b.n	80019f4 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	2280      	movs	r2, #128	; 0x80
 80019ea:	02d2      	lsls	r2, r2, #11
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
  }
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b006      	add	sp, #24
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2220      	movs	r2, #32
 8001a08:	5c9b      	ldrb	r3, [r3, r2]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d12f      	bne.n	8001a70 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2220      	movs	r2, #32
 8001a14:	2102      	movs	r1, #2
 8001a16:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2101      	movs	r1, #1
 8001a24:	438a      	bics	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a28:	f7ff fa00 	bl	8000e2c <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a30:	e013      	b.n	8001a5a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a32:	f7ff f9fb 	bl	8000e2c <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b0a      	cmp	r3, #10
 8001a3e:	d90c      	bls.n	8001a5a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	0292      	lsls	r2, r2, #10
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2220      	movs	r2, #32
 8001a52:	2105      	movs	r1, #5
 8001a54:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e012      	b.n	8001a80 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	4013      	ands	r3, r2
 8001a64:	d1e5      	bne.n	8001a32 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e007      	b.n	8001a80 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	0312      	lsls	r2, r2, #12
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
  }
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b004      	add	sp, #16
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a96:	201f      	movs	r0, #31
 8001a98:	183b      	adds	r3, r7, r0
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	5c52      	ldrb	r2, [r2, r1]
 8001aa0:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aaa:	183b      	adds	r3, r7, r0
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d004      	beq.n	8001abc <HAL_CAN_AddTxMessage+0x34>
 8001ab2:	183b      	adds	r3, r7, r0
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d000      	beq.n	8001abc <HAL_CAN_AddTxMessage+0x34>
 8001aba:	e0b7      	b.n	8001c2c <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	04db      	lsls	r3, r3, #19
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d10a      	bne.n	8001adc <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	051b      	lsls	r3, r3, #20
 8001acc:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ace:	d105      	bne.n	8001adc <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	055b      	lsls	r3, r3, #21
 8001ad6:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ad8:	d100      	bne.n	8001adc <HAL_CAN_AddTxMessage+0x54>
 8001ada:	e09e      	b.n	8001c1a <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	0e1b      	lsrs	r3, r3, #24
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d908      	bls.n	8001afe <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	0412      	lsls	r2, r2, #16
 8001af4:	431a      	orrs	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e09e      	b.n	8001c3c <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001afe:	2201      	movs	r2, #1
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10c      	bne.n	8001b2a <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4311      	orrs	r1, r2
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	3218      	adds	r2, #24
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	50d1      	str	r1, [r2, r3]
 8001b28:	e00f      	b.n	8001b4a <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b34:	431a      	orrs	r2, r3
 8001b36:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001b40:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	3218      	adds	r2, #24
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6819      	ldr	r1, [r3, #0]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3318      	adds	r3, #24
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	18cb      	adds	r3, r1, r3
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	7d1b      	ldrb	r3, [r3, #20]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d112      	bne.n	8001b8c <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	18d3      	adds	r3, r2, r3
 8001b72:	3304      	adds	r3, #4
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3318      	adds	r3, #24
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	18cb      	adds	r3, r1, r3
 8001b88:	3304      	adds	r3, #4
 8001b8a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3307      	adds	r3, #7
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	061a      	lsls	r2, r3, #24
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3306      	adds	r3, #6
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	041b      	lsls	r3, r3, #16
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3305      	adds	r3, #5
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3304      	adds	r3, #4
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	0019      	movs	r1, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	6979      	ldr	r1, [r7, #20]
 8001bb8:	23c6      	movs	r3, #198	; 0xc6
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	0109      	lsls	r1, r1, #4
 8001bbe:	1841      	adds	r1, r0, r1
 8001bc0:	18cb      	adds	r3, r1, r3
 8001bc2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3303      	adds	r3, #3
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	061a      	lsls	r2, r3, #24
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3302      	adds	r3, #2
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	041b      	lsls	r3, r3, #16
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	0019      	movs	r1, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	6979      	ldr	r1, [r7, #20]
 8001bee:	23c4      	movs	r3, #196	; 0xc4
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	0109      	lsls	r1, r1, #4
 8001bf4:	1841      	adds	r1, r0, r1
 8001bf6:	18cb      	adds	r3, r1, r3
 8001bf8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	3218      	adds	r2, #24
 8001c02:	0112      	lsls	r2, r2, #4
 8001c04:	58d2      	ldr	r2, [r2, r3]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	4311      	orrs	r1, r2
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	3218      	adds	r2, #24
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e010      	b.n	8001c3c <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	0392      	lsls	r2, r2, #14
 8001c22:	431a      	orrs	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e007      	b.n	8001c3c <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2280      	movs	r2, #128	; 0x80
 8001c32:	02d2      	lsls	r2, r2, #11
 8001c34:	431a      	orrs	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
  }
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b008      	add	sp, #32
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c50:	200b      	movs	r0, #11
 8001c52:	183b      	adds	r3, r7, r0
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	2120      	movs	r1, #32
 8001c58:	5c52      	ldrb	r2, [r2, r1]
 8001c5a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	18bb      	adds	r3, r7, r2
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d003      	beq.n	8001c6e <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8001c66:	18bb      	adds	r3, r7, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d11d      	bne.n	8001caa <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	04db      	lsls	r3, r3, #19
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d002      	beq.n	8001c82 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	051b      	lsls	r3, r3, #20
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d002      	beq.n	8001c96 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3301      	adds	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	055b      	lsls	r3, r3, #21
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d002      	beq.n	8001caa <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b004      	add	sp, #16
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cc2:	200b      	movs	r0, #11
 8001cc4:	183b      	adds	r3, r7, r0
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	2120      	movs	r1, #32
 8001cca:	5c52      	ldrb	r2, [r2, r1]
 8001ccc:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cce:	0002      	movs	r2, r0
 8001cd0:	18bb      	adds	r3, r7, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d003      	beq.n	8001ce0 <HAL_CAN_IsTxMessagePending+0x2c>
 8001cd8:	18bb      	adds	r3, r7, r2
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d10b      	bne.n	8001cf8 <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	0692      	lsls	r2, r2, #26
 8001cea:	401a      	ands	r2, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	069b      	lsls	r3, r3, #26
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
}
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b004      	add	sp, #16
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d10:	2017      	movs	r0, #23
 8001d12:	183b      	adds	r3, r7, r0
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	2120      	movs	r1, #32
 8001d18:	5c52      	ldrb	r2, [r2, r1]
 8001d1a:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	18bb      	adds	r3, r7, r2
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d004      	beq.n	8001d30 <HAL_CAN_GetRxMessage+0x2e>
 8001d26:	18bb      	adds	r3, r7, r2
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d000      	beq.n	8001d30 <HAL_CAN_GetRxMessage+0x2e>
 8001d2e:	e0f8      	b.n	8001f22 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10e      	bne.n	8001d54 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d117      	bne.n	8001d72 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	0392      	lsls	r2, r2, #14
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0ee      	b.n	8001f32 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d108      	bne.n	8001d72 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	2280      	movs	r2, #128	; 0x80
 8001d66:	0392      	lsls	r2, r2, #14
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e0df      	b.n	8001f32 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	321b      	adds	r2, #27
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	58d3      	ldr	r3, [r2, r3]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	401a      	ands	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10b      	bne.n	8001da6 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	321b      	adds	r2, #27
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	58d3      	ldr	r3, [r2, r3]
 8001d9a:	0d5b      	lsrs	r3, r3, #21
 8001d9c:	055b      	lsls	r3, r3, #21
 8001d9e:	0d5a      	lsrs	r2, r3, #21
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	e00a      	b.n	8001dbc <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	321b      	adds	r2, #27
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	58d3      	ldr	r3, [r2, r3]
 8001db2:	08db      	lsrs	r3, r3, #3
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	321b      	adds	r2, #27
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	58d3      	ldr	r3, [r2, r3]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	401a      	ands	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	331b      	adds	r3, #27
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	18d3      	adds	r3, r2, r3
 8001ddc:	3304      	adds	r3, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	220f      	movs	r2, #15
 8001de2:	401a      	ands	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	331b      	adds	r3, #27
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	18d3      	adds	r3, r2, r3
 8001df4:	3304      	adds	r3, #4
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	22ff      	movs	r2, #255	; 0xff
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	331b      	adds	r3, #27
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	18d3      	adds	r3, r2, r3
 8001e0e:	3304      	adds	r3, #4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	0c1b      	lsrs	r3, r3, #16
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	0c1a      	lsrs	r2, r3, #16
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	23dc      	movs	r3, #220	; 0xdc
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	188a      	adds	r2, r1, r2
 8001e2a:	18d3      	adds	r3, r2, r3
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6819      	ldr	r1, [r3, #0]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	23dc      	movs	r3, #220	; 0xdc
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	188a      	adds	r2, r1, r2
 8001e42:	18d3      	adds	r3, r2, r3
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	0a1a      	lsrs	r2, r3, #8
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	23dc      	movs	r3, #220	; 0xdc
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	188a      	adds	r2, r1, r2
 8001e5e:	18d3      	adds	r3, r2, r3
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0c1a      	lsrs	r2, r3, #16
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	3302      	adds	r3, #2
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	23dc      	movs	r3, #220	; 0xdc
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	188a      	adds	r2, r1, r2
 8001e7a:	18d3      	adds	r3, r2, r3
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	0e1a      	lsrs	r2, r3, #24
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	3303      	adds	r3, #3
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	23de      	movs	r3, #222	; 0xde
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	188a      	adds	r2, r1, r2
 8001e96:	18d3      	adds	r3, r2, r3
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6819      	ldr	r1, [r3, #0]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	23de      	movs	r3, #222	; 0xde
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	188a      	adds	r2, r1, r2
 8001eb0:	18d3      	adds	r3, r2, r3
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0a1a      	lsrs	r2, r3, #8
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	3305      	adds	r3, #5
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	23de      	movs	r3, #222	; 0xde
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	188a      	adds	r2, r1, r2
 8001ecc:	18d3      	adds	r3, r2, r3
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0c1a      	lsrs	r2, r3, #16
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	3306      	adds	r3, #6
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	23de      	movs	r3, #222	; 0xde
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	188a      	adds	r2, r1, r2
 8001ee8:	18d3      	adds	r3, r2, r3
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0e1a      	lsrs	r2, r3, #24
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	3307      	adds	r3, #7
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d108      	bne.n	8001f0e <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2120      	movs	r1, #32
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	e007      	b.n	8001f1e <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2120      	movs	r1, #32
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e007      	b.n	8001f32 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	2280      	movs	r2, #128	; 0x80
 8001f28:	02d2      	lsls	r2, r2, #11
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
  }
}
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b006      	add	sp, #24
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f44:	200f      	movs	r0, #15
 8001f46:	183b      	adds	r3, r7, r0
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	2120      	movs	r1, #32
 8001f4c:	5c52      	ldrb	r2, [r2, r1]
 8001f4e:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f50:	0002      	movs	r2, r0
 8001f52:	18bb      	adds	r3, r7, r2
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d003      	beq.n	8001f62 <HAL_CAN_ActivateNotification+0x28>
 8001f5a:	18bb      	adds	r3, r7, r2
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d109      	bne.n	8001f76 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6959      	ldr	r1, [r3, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e007      	b.n	8001f86 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	02d2      	lsls	r2, r2, #11
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
  }
}
 8001f86:	0018      	movs	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b004      	add	sp, #16
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b08a      	sub	sp, #40	; 0x28
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d100      	bne.n	8001fd4 <HAL_CAN_IRQHandler+0x46>
 8001fd2:	e084      	b.n	80020de <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d024      	beq.n	8002026 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d004      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 f981 	bl	80022f6 <HAL_CAN_TxMailbox0CompleteCallback>
 8001ff4:	e017      	b.n	8002026 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d005      	beq.n	800200a <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	2280      	movs	r2, #128	; 0x80
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	4313      	orrs	r3, r2
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
 8002008:	e00d      	b.n	8002026 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2208      	movs	r2, #8
 800200e:	4013      	ands	r3, r2
 8002010:	d005      	beq.n	800201e <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	0152      	lsls	r2, r2, #5
 8002018:	4313      	orrs	r3, r2
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
 800201c:	e003      	b.n	8002026 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f000 f980 	bl	8002326 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4013      	ands	r3, r2
 800202e:	d028      	beq.n	8002082 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	0052      	lsls	r2, r2, #1
 8002038:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4013      	ands	r3, r2
 8002042:	d004      	beq.n	800204e <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	0018      	movs	r0, r3
 8002048:	f000 f95d 	bl	8002306 <HAL_CAN_TxMailbox1CompleteCallback>
 800204c:	e019      	b.n	8002082 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4013      	ands	r3, r2
 8002056:	d005      	beq.n	8002064 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	2280      	movs	r2, #128	; 0x80
 800205c:	0192      	lsls	r2, r2, #6
 800205e:	4313      	orrs	r3, r2
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
 8002062:	e00e      	b.n	8002082 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4013      	ands	r3, r2
 800206c:	d005      	beq.n	800207a <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	2280      	movs	r2, #128	; 0x80
 8002072:	01d2      	lsls	r2, r2, #7
 8002074:	4313      	orrs	r3, r2
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
 8002078:	e003      	b.n	8002082 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0018      	movs	r0, r3
 800207e:	f000 f95a 	bl	8002336 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	025b      	lsls	r3, r3, #9
 8002088:	4013      	ands	r3, r2
 800208a:	d028      	beq.n	80020de <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	0252      	lsls	r2, r2, #9
 8002094:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	029b      	lsls	r3, r3, #10
 800209c:	4013      	ands	r3, r2
 800209e:	d004      	beq.n	80020aa <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 f937 	bl	8002316 <HAL_CAN_TxMailbox2CompleteCallback>
 80020a8:	e019      	b.n	80020de <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	02db      	lsls	r3, r3, #11
 80020b0:	4013      	ands	r3, r2
 80020b2:	d005      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	0212      	lsls	r2, r2, #8
 80020ba:	4313      	orrs	r3, r2
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	e00e      	b.n	80020de <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	031b      	lsls	r3, r3, #12
 80020c6:	4013      	ands	r3, r2
 80020c8:	d005      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	0252      	lsls	r2, r2, #9
 80020d0:	4313      	orrs	r3, r2
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
 80020d4:	e003      	b.n	80020de <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 f934 	bl	8002346 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	2208      	movs	r2, #8
 80020e2:	4013      	ands	r3, r2
 80020e4:	d00c      	beq.n	8002100 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2210      	movs	r2, #16
 80020ea:	4013      	ands	r3, r2
 80020ec:	d008      	beq.n	8002100 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	0092      	lsls	r2, r2, #2
 80020f4:	4313      	orrs	r3, r2
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2210      	movs	r2, #16
 80020fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	2204      	movs	r2, #4
 8002104:	4013      	ands	r3, r2
 8002106:	d00b      	beq.n	8002120 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2208      	movs	r2, #8
 800210c:	4013      	ands	r3, r2
 800210e:	d007      	beq.n	8002120 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2208      	movs	r2, #8
 8002116:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0018      	movs	r0, r3
 800211c:	f000 f91b 	bl	8002356 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	2202      	movs	r2, #2
 8002124:	4013      	ands	r3, r2
 8002126:	d009      	beq.n	800213c <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2203      	movs	r2, #3
 8002130:	4013      	ands	r3, r2
 8002132:	d003      	beq.n	800213c <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	0018      	movs	r0, r3
 8002138:	f7fe fc2a 	bl	8000990 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	2240      	movs	r2, #64	; 0x40
 8002140:	4013      	ands	r3, r2
 8002142:	d00c      	beq.n	800215e <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2210      	movs	r2, #16
 8002148:	4013      	ands	r3, r2
 800214a:	d008      	beq.n	800215e <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	00d2      	lsls	r2, r2, #3
 8002152:	4313      	orrs	r3, r2
 8002154:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2210      	movs	r2, #16
 800215c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	2220      	movs	r2, #32
 8002162:	4013      	ands	r3, r2
 8002164:	d00b      	beq.n	800217e <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2208      	movs	r2, #8
 800216a:	4013      	ands	r3, r2
 800216c:	d007      	beq.n	800217e <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2208      	movs	r2, #8
 8002174:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	0018      	movs	r0, r3
 800217a:	f000 f8f4 	bl	8002366 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	2210      	movs	r2, #16
 8002182:	4013      	ands	r3, r2
 8002184:	d009      	beq.n	800219a <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2203      	movs	r2, #3
 800218e:	4013      	ands	r3, r2
 8002190:	d003      	beq.n	800219a <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0018      	movs	r0, r3
 8002196:	f7fe fc08 	bl	80009aa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800219a:	6a3a      	ldr	r2, [r7, #32]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	029b      	lsls	r3, r3, #10
 80021a0:	4013      	ands	r3, r2
 80021a2:	d00b      	beq.n	80021bc <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2210      	movs	r2, #16
 80021a8:	4013      	ands	r3, r2
 80021aa:	d007      	beq.n	80021bc <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2210      	movs	r2, #16
 80021b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 f8dd 	bl	8002376 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021bc:	6a3a      	ldr	r2, [r7, #32]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	025b      	lsls	r3, r3, #9
 80021c2:	4013      	ands	r3, r2
 80021c4:	d00b      	beq.n	80021de <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	2208      	movs	r2, #8
 80021ca:	4013      	ands	r3, r2
 80021cc:	d007      	beq.n	80021de <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2208      	movs	r2, #8
 80021d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 f8d4 	bl	8002386 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021de:	6a3a      	ldr	r2, [r7, #32]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	4013      	ands	r3, r2
 80021e6:	d100      	bne.n	80021ea <HAL_CAN_IRQHandler+0x25c>
 80021e8:	e074      	b.n	80022d4 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	2204      	movs	r2, #4
 80021ee:	4013      	ands	r3, r2
 80021f0:	d100      	bne.n	80021f4 <HAL_CAN_IRQHandler+0x266>
 80021f2:	e06b      	b.n	80022cc <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021f4:	6a3a      	ldr	r2, [r7, #32]
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4013      	ands	r3, r2
 80021fc:	d007      	beq.n	800220e <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002204:	d003      	beq.n	800220e <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	2201      	movs	r2, #1
 800220a:	4313      	orrs	r3, r2
 800220c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800220e:	6a3a      	ldr	r2, [r7, #32]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4013      	ands	r3, r2
 8002216:	d007      	beq.n	8002228 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2202      	movs	r2, #2
 800221c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800221e:	d003      	beq.n	8002228 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	2202      	movs	r2, #2
 8002224:	4313      	orrs	r3, r2
 8002226:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002228:	6a3a      	ldr	r2, [r7, #32]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4013      	ands	r3, r2
 8002230:	d007      	beq.n	8002242 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2204      	movs	r2, #4
 8002236:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002238:	d003      	beq.n	8002242 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	2204      	movs	r2, #4
 800223e:	4313      	orrs	r3, r2
 8002240:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002242:	6a3a      	ldr	r2, [r7, #32]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	4013      	ands	r3, r2
 800224a:	d03f      	beq.n	80022cc <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2270      	movs	r2, #112	; 0x70
 8002250:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002252:	d03b      	beq.n	80022cc <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2270      	movs	r2, #112	; 0x70
 8002258:	4013      	ands	r3, r2
 800225a:	2b60      	cmp	r3, #96	; 0x60
 800225c:	d027      	beq.n	80022ae <HAL_CAN_IRQHandler+0x320>
 800225e:	d82c      	bhi.n	80022ba <HAL_CAN_IRQHandler+0x32c>
 8002260:	2b50      	cmp	r3, #80	; 0x50
 8002262:	d01f      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x316>
 8002264:	d829      	bhi.n	80022ba <HAL_CAN_IRQHandler+0x32c>
 8002266:	2b40      	cmp	r3, #64	; 0x40
 8002268:	d017      	beq.n	800229a <HAL_CAN_IRQHandler+0x30c>
 800226a:	d826      	bhi.n	80022ba <HAL_CAN_IRQHandler+0x32c>
 800226c:	2b30      	cmp	r3, #48	; 0x30
 800226e:	d00f      	beq.n	8002290 <HAL_CAN_IRQHandler+0x302>
 8002270:	d823      	bhi.n	80022ba <HAL_CAN_IRQHandler+0x32c>
 8002272:	2b10      	cmp	r3, #16
 8002274:	d002      	beq.n	800227c <HAL_CAN_IRQHandler+0x2ee>
 8002276:	2b20      	cmp	r3, #32
 8002278:	d005      	beq.n	8002286 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800227a:	e01e      	b.n	80022ba <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	2208      	movs	r2, #8
 8002280:	4313      	orrs	r3, r2
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002284:	e01a      	b.n	80022bc <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	2210      	movs	r2, #16
 800228a:	4313      	orrs	r3, r2
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800228e:	e015      	b.n	80022bc <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	2220      	movs	r2, #32
 8002294:	4313      	orrs	r3, r2
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002298:	e010      	b.n	80022bc <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	2240      	movs	r2, #64	; 0x40
 800229e:	4313      	orrs	r3, r2
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022a2:	e00b      	b.n	80022bc <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	4313      	orrs	r3, r2
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022ac:	e006      	b.n	80022bc <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	0052      	lsls	r2, r2, #1
 80022b4:	4313      	orrs	r3, r2
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022b8:	e000      	b.n	80022bc <HAL_CAN_IRQHandler+0x32e>
            break;
 80022ba:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2170      	movs	r1, #112	; 0x70
 80022c8:	438a      	bics	r2, r1
 80022ca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2204      	movs	r2, #4
 80022d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d009      	beq.n	80022ee <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 f854 	bl	8002396 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b00a      	add	sp, #40	; 0x28
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	b002      	add	sp, #8
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b002      	add	sp, #8
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	b002      	add	sp, #8
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	b002      	add	sp, #8
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	b002      	add	sp, #8
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	46bd      	mov	sp, r7
 8002362:	b002      	add	sp, #8
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b002      	add	sp, #8
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	b002      	add	sp, #8
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	46bd      	mov	sp, r7
 8002392:	b002      	add	sp, #8
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b002      	add	sp, #8
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	0002      	movs	r2, r0
 80023b0:	1dfb      	adds	r3, r7, #7
 80023b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b7f      	cmp	r3, #127	; 0x7f
 80023ba:	d809      	bhi.n	80023d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023bc:	1dfb      	adds	r3, r7, #7
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	001a      	movs	r2, r3
 80023c2:	231f      	movs	r3, #31
 80023c4:	401a      	ands	r2, r3
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <__NVIC_EnableIRQ+0x30>)
 80023c8:	2101      	movs	r1, #1
 80023ca:	4091      	lsls	r1, r2
 80023cc:	000a      	movs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
  }
}
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b002      	add	sp, #8
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	e000e100 	.word	0xe000e100

080023dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	0002      	movs	r2, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	1dfb      	adds	r3, r7, #7
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b7f      	cmp	r3, #127	; 0x7f
 80023f0:	d828      	bhi.n	8002444 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f2:	4a2f      	ldr	r2, [pc, #188]	; (80024b0 <__NVIC_SetPriority+0xd4>)
 80023f4:	1dfb      	adds	r3, r7, #7
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	b25b      	sxtb	r3, r3
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	33c0      	adds	r3, #192	; 0xc0
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	589b      	ldr	r3, [r3, r2]
 8002402:	1dfa      	adds	r2, r7, #7
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	0011      	movs	r1, r2
 8002408:	2203      	movs	r2, #3
 800240a:	400a      	ands	r2, r1
 800240c:	00d2      	lsls	r2, r2, #3
 800240e:	21ff      	movs	r1, #255	; 0xff
 8002410:	4091      	lsls	r1, r2
 8002412:	000a      	movs	r2, r1
 8002414:	43d2      	mvns	r2, r2
 8002416:	401a      	ands	r2, r3
 8002418:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	019b      	lsls	r3, r3, #6
 800241e:	22ff      	movs	r2, #255	; 0xff
 8002420:	401a      	ands	r2, r3
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	0018      	movs	r0, r3
 8002428:	2303      	movs	r3, #3
 800242a:	4003      	ands	r3, r0
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002430:	481f      	ldr	r0, [pc, #124]	; (80024b0 <__NVIC_SetPriority+0xd4>)
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	b25b      	sxtb	r3, r3
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	430a      	orrs	r2, r1
 800243c:	33c0      	adds	r3, #192	; 0xc0
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002442:	e031      	b.n	80024a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <__NVIC_SetPriority+0xd8>)
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	0019      	movs	r1, r3
 800244c:	230f      	movs	r3, #15
 800244e:	400b      	ands	r3, r1
 8002450:	3b08      	subs	r3, #8
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3306      	adds	r3, #6
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	18d3      	adds	r3, r2, r3
 800245a:	3304      	adds	r3, #4
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	1dfa      	adds	r2, r7, #7
 8002460:	7812      	ldrb	r2, [r2, #0]
 8002462:	0011      	movs	r1, r2
 8002464:	2203      	movs	r2, #3
 8002466:	400a      	ands	r2, r1
 8002468:	00d2      	lsls	r2, r2, #3
 800246a:	21ff      	movs	r1, #255	; 0xff
 800246c:	4091      	lsls	r1, r2
 800246e:	000a      	movs	r2, r1
 8002470:	43d2      	mvns	r2, r2
 8002472:	401a      	ands	r2, r3
 8002474:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	019b      	lsls	r3, r3, #6
 800247a:	22ff      	movs	r2, #255	; 0xff
 800247c:	401a      	ands	r2, r3
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	0018      	movs	r0, r3
 8002484:	2303      	movs	r3, #3
 8002486:	4003      	ands	r3, r0
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800248c:	4809      	ldr	r0, [pc, #36]	; (80024b4 <__NVIC_SetPriority+0xd8>)
 800248e:	1dfb      	adds	r3, r7, #7
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	001c      	movs	r4, r3
 8002494:	230f      	movs	r3, #15
 8002496:	4023      	ands	r3, r4
 8002498:	3b08      	subs	r3, #8
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	430a      	orrs	r2, r1
 800249e:	3306      	adds	r3, #6
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	18c3      	adds	r3, r0, r3
 80024a4:	3304      	adds	r3, #4
 80024a6:	601a      	str	r2, [r3, #0]
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b003      	add	sp, #12
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	045b      	lsls	r3, r3, #17
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d301      	bcc.n	80024d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024cc:	2301      	movs	r3, #1
 80024ce:	e010      	b.n	80024f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <SysTick_Config+0x44>)
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	3a01      	subs	r2, #1
 80024d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d8:	2301      	movs	r3, #1
 80024da:	425b      	negs	r3, r3
 80024dc:	2103      	movs	r1, #3
 80024de:	0018      	movs	r0, r3
 80024e0:	f7ff ff7c 	bl	80023dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <SysTick_Config+0x44>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <SysTick_Config+0x44>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	0018      	movs	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b002      	add	sp, #8
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	e000e010 	.word	0xe000e010

08002500 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	210f      	movs	r1, #15
 800250c:	187b      	adds	r3, r7, r1
 800250e:	1c02      	adds	r2, r0, #0
 8002510:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	187b      	adds	r3, r7, r1
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	b25b      	sxtb	r3, r3
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f7ff ff5d 	bl	80023dc <__NVIC_SetPriority>
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b004      	add	sp, #16
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	0002      	movs	r2, r0
 8002532:	1dfb      	adds	r3, r7, #7
 8002534:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002536:	1dfb      	adds	r3, r7, #7
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b25b      	sxtb	r3, r3
 800253c:	0018      	movs	r0, r3
 800253e:	f7ff ff33 	bl	80023a8 <__NVIC_EnableIRQ>
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	b002      	add	sp, #8
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff ffaf 	bl	80024b8 <SysTick_Config>
 800255a:	0003      	movs	r3, r0
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002572:	e149      	b.n	8002808 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4091      	lsls	r1, r2
 800257e:	000a      	movs	r2, r1
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d100      	bne.n	800258c <HAL_GPIO_Init+0x28>
 800258a:	e13a      	b.n	8002802 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2203      	movs	r2, #3
 8002592:	4013      	ands	r3, r2
 8002594:	2b01      	cmp	r3, #1
 8002596:	d005      	beq.n	80025a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2203      	movs	r2, #3
 800259e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d130      	bne.n	8002606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	409a      	lsls	r2, r3
 80025b2:	0013      	movs	r3, r2
 80025b4:	43da      	mvns	r2, r3
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	409a      	lsls	r2, r3
 80025c6:	0013      	movs	r3, r2
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025da:	2201      	movs	r2, #1
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
 80025e0:	0013      	movs	r3, r2
 80025e2:	43da      	mvns	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	2201      	movs	r2, #1
 80025f2:	401a      	ands	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	409a      	lsls	r2, r3
 80025f8:	0013      	movs	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2203      	movs	r2, #3
 800260c:	4013      	ands	r3, r2
 800260e:	2b03      	cmp	r3, #3
 8002610:	d017      	beq.n	8002642 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	409a      	lsls	r2, r3
 8002620:	0013      	movs	r3, r2
 8002622:	43da      	mvns	r2, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	409a      	lsls	r2, r3
 8002634:	0013      	movs	r3, r2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2203      	movs	r2, #3
 8002648:	4013      	ands	r3, r2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d123      	bne.n	8002696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	58d3      	ldr	r3, [r2, r3]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2207      	movs	r2, #7
 8002660:	4013      	ands	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	220f      	movs	r2, #15
 8002666:	409a      	lsls	r2, r3
 8002668:	0013      	movs	r3, r2
 800266a:	43da      	mvns	r2, r3
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2107      	movs	r1, #7
 800267a:	400b      	ands	r3, r1
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	409a      	lsls	r2, r3
 8002680:	0013      	movs	r3, r2
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	6939      	ldr	r1, [r7, #16]
 8002694:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	409a      	lsls	r2, r3
 80026a4:	0013      	movs	r3, r2
 80026a6:	43da      	mvns	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	401a      	ands	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	409a      	lsls	r2, r3
 80026bc:	0013      	movs	r3, r2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	23c0      	movs	r3, #192	; 0xc0
 80026d0:	029b      	lsls	r3, r3, #10
 80026d2:	4013      	ands	r3, r2
 80026d4:	d100      	bne.n	80026d8 <HAL_GPIO_Init+0x174>
 80026d6:	e094      	b.n	8002802 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d8:	4b51      	ldr	r3, [pc, #324]	; (8002820 <HAL_GPIO_Init+0x2bc>)
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_GPIO_Init+0x2bc>)
 80026de:	2101      	movs	r1, #1
 80026e0:	430a      	orrs	r2, r1
 80026e2:	619a      	str	r2, [r3, #24]
 80026e4:	4b4e      	ldr	r3, [pc, #312]	; (8002820 <HAL_GPIO_Init+0x2bc>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2201      	movs	r2, #1
 80026ea:	4013      	ands	r3, r2
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026f0:	4a4c      	ldr	r2, [pc, #304]	; (8002824 <HAL_GPIO_Init+0x2c0>)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	589b      	ldr	r3, [r3, r2]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2203      	movs	r2, #3
 8002702:	4013      	ands	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	220f      	movs	r2, #15
 8002708:	409a      	lsls	r2, r3
 800270a:	0013      	movs	r3, r2
 800270c:	43da      	mvns	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	2390      	movs	r3, #144	; 0x90
 8002718:	05db      	lsls	r3, r3, #23
 800271a:	429a      	cmp	r2, r3
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x1d6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a41      	ldr	r2, [pc, #260]	; (8002828 <HAL_GPIO_Init+0x2c4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x1d2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a40      	ldr	r2, [pc, #256]	; (800282c <HAL_GPIO_Init+0x2c8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x1ce>
 800272e:	2302      	movs	r3, #2
 8002730:	e004      	b.n	800273c <HAL_GPIO_Init+0x1d8>
 8002732:	2305      	movs	r3, #5
 8002734:	e002      	b.n	800273c <HAL_GPIO_Init+0x1d8>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_GPIO_Init+0x1d8>
 800273a:	2300      	movs	r3, #0
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	2103      	movs	r1, #3
 8002740:	400a      	ands	r2, r1
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	4093      	lsls	r3, r2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800274c:	4935      	ldr	r1, [pc, #212]	; (8002824 <HAL_GPIO_Init+0x2c0>)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800275a:	4b35      	ldr	r3, [pc, #212]	; (8002830 <HAL_GPIO_Init+0x2cc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43da      	mvns	r2, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	025b      	lsls	r3, r3, #9
 8002772:	4013      	ands	r3, r2
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800277e:	4b2c      	ldr	r3, [pc, #176]	; (8002830 <HAL_GPIO_Init+0x2cc>)
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002784:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <HAL_GPIO_Init+0x2cc>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43da      	mvns	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	029b      	lsls	r3, r3, #10
 800279c:	4013      	ands	r3, r2
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027a8:	4b21      	ldr	r3, [pc, #132]	; (8002830 <HAL_GPIO_Init+0x2cc>)
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_GPIO_Init+0x2cc>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43da      	mvns	r2, r3
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	035b      	lsls	r3, r3, #13
 80027c6:	4013      	ands	r3, r2
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <HAL_GPIO_Init+0x2cc>)
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_GPIO_Init+0x2cc>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	43da      	mvns	r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	039b      	lsls	r3, r3, #14
 80027f0:	4013      	ands	r3, r2
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <HAL_GPIO_Init+0x2cc>)
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3301      	adds	r3, #1
 8002806:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	40da      	lsrs	r2, r3
 8002810:	1e13      	subs	r3, r2, #0
 8002812:	d000      	beq.n	8002816 <HAL_GPIO_Init+0x2b2>
 8002814:	e6ae      	b.n	8002574 <HAL_GPIO_Init+0x10>
  } 
}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b006      	add	sp, #24
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	40010000 	.word	0x40010000
 8002828:	48000400 	.word	0x48000400
 800282c:	48000800 	.word	0x48000800
 8002830:	40010400 	.word	0x40010400

08002834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	000a      	movs	r2, r1
 800283e:	1cbb      	adds	r3, r7, #2
 8002840:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	1cba      	adds	r2, r7, #2
 8002848:	8812      	ldrh	r2, [r2, #0]
 800284a:	4013      	ands	r3, r2
 800284c:	d004      	beq.n	8002858 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800284e:	230f      	movs	r3, #15
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	e003      	b.n	8002860 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002858:	230f      	movs	r3, #15
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002860:	230f      	movs	r3, #15
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	781b      	ldrb	r3, [r3, #0]
  }
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b004      	add	sp, #16
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	0008      	movs	r0, r1
 8002878:	0011      	movs	r1, r2
 800287a:	1cbb      	adds	r3, r7, #2
 800287c:	1c02      	adds	r2, r0, #0
 800287e:	801a      	strh	r2, [r3, #0]
 8002880:	1c7b      	adds	r3, r7, #1
 8002882:	1c0a      	adds	r2, r1, #0
 8002884:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002886:	1c7b      	adds	r3, r7, #1
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800288e:	1cbb      	adds	r3, r7, #2
 8002890:	881a      	ldrh	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002896:	e003      	b.n	80028a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002898:	1cbb      	adds	r3, r7, #2
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b002      	add	sp, #8
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f000 fb76 	bl	8002fa8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2201      	movs	r2, #1
 80028c2:	4013      	ands	r3, r2
 80028c4:	d100      	bne.n	80028c8 <HAL_RCC_OscConfig+0x20>
 80028c6:	e08e      	b.n	80029e6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028c8:	4bc5      	ldr	r3, [pc, #788]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	220c      	movs	r2, #12
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d00e      	beq.n	80028f2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028d4:	4bc2      	ldr	r3, [pc, #776]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	220c      	movs	r2, #12
 80028da:	4013      	ands	r3, r2
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d117      	bne.n	8002910 <HAL_RCC_OscConfig+0x68>
 80028e0:	4bbf      	ldr	r3, [pc, #764]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	23c0      	movs	r3, #192	; 0xc0
 80028e6:	025b      	lsls	r3, r3, #9
 80028e8:	401a      	ands	r2, r3
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	025b      	lsls	r3, r3, #9
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d10e      	bne.n	8002910 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f2:	4bbb      	ldr	r3, [pc, #748]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	029b      	lsls	r3, r3, #10
 80028fa:	4013      	ands	r3, r2
 80028fc:	d100      	bne.n	8002900 <HAL_RCC_OscConfig+0x58>
 80028fe:	e071      	b.n	80029e4 <HAL_RCC_OscConfig+0x13c>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d000      	beq.n	800290a <HAL_RCC_OscConfig+0x62>
 8002908:	e06c      	b.n	80029e4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	f000 fb4c 	bl	8002fa8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d107      	bne.n	8002928 <HAL_RCC_OscConfig+0x80>
 8002918:	4bb1      	ldr	r3, [pc, #708]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4bb0      	ldr	r3, [pc, #704]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	0249      	lsls	r1, r1, #9
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e02f      	b.n	8002988 <HAL_RCC_OscConfig+0xe0>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10c      	bne.n	800294a <HAL_RCC_OscConfig+0xa2>
 8002930:	4bab      	ldr	r3, [pc, #684]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4baa      	ldr	r3, [pc, #680]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002936:	49ab      	ldr	r1, [pc, #684]	; (8002be4 <HAL_RCC_OscConfig+0x33c>)
 8002938:	400a      	ands	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	4ba8      	ldr	r3, [pc, #672]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4ba7      	ldr	r3, [pc, #668]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002942:	49a9      	ldr	r1, [pc, #676]	; (8002be8 <HAL_RCC_OscConfig+0x340>)
 8002944:	400a      	ands	r2, r1
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	e01e      	b.n	8002988 <HAL_RCC_OscConfig+0xe0>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b05      	cmp	r3, #5
 8002950:	d10e      	bne.n	8002970 <HAL_RCC_OscConfig+0xc8>
 8002952:	4ba3      	ldr	r3, [pc, #652]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4ba2      	ldr	r3, [pc, #648]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	02c9      	lsls	r1, r1, #11
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	4b9f      	ldr	r3, [pc, #636]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b9e      	ldr	r3, [pc, #632]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002966:	2180      	movs	r1, #128	; 0x80
 8002968:	0249      	lsls	r1, r1, #9
 800296a:	430a      	orrs	r2, r1
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0xe0>
 8002970:	4b9b      	ldr	r3, [pc, #620]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b9a      	ldr	r3, [pc, #616]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002976:	499b      	ldr	r1, [pc, #620]	; (8002be4 <HAL_RCC_OscConfig+0x33c>)
 8002978:	400a      	ands	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	4b98      	ldr	r3, [pc, #608]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b97      	ldr	r3, [pc, #604]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002982:	4999      	ldr	r1, [pc, #612]	; (8002be8 <HAL_RCC_OscConfig+0x340>)
 8002984:	400a      	ands	r2, r1
 8002986:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d014      	beq.n	80029ba <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe fa4c 	bl	8000e2c <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800299a:	f7fe fa47 	bl	8000e2c <HAL_GetTick>
 800299e:	0002      	movs	r2, r0
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b64      	cmp	r3, #100	; 0x64
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e2fd      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ac:	4b8c      	ldr	r3, [pc, #560]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	029b      	lsls	r3, r3, #10
 80029b4:	4013      	ands	r3, r2
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0xf2>
 80029b8:	e015      	b.n	80029e6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe fa37 	bl	8000e2c <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c4:	f7fe fa32 	bl	8000e2c <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e2e8      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	4b82      	ldr	r3, [pc, #520]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	029b      	lsls	r3, r3, #10
 80029de:	4013      	ands	r3, r2
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x11c>
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2202      	movs	r2, #2
 80029ec:	4013      	ands	r3, r2
 80029ee:	d100      	bne.n	80029f2 <HAL_RCC_OscConfig+0x14a>
 80029f0:	e06c      	b.n	8002acc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029f2:	4b7b      	ldr	r3, [pc, #492]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	220c      	movs	r2, #12
 80029f8:	4013      	ands	r3, r2
 80029fa:	d00e      	beq.n	8002a1a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029fc:	4b78      	ldr	r3, [pc, #480]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	220c      	movs	r2, #12
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d11f      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1a0>
 8002a08:	4b75      	ldr	r3, [pc, #468]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	23c0      	movs	r3, #192	; 0xc0
 8002a0e:	025b      	lsls	r3, r3, #9
 8002a10:	401a      	ands	r2, r3
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d116      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1a:	4b71      	ldr	r3, [pc, #452]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_OscConfig+0x188>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e2bb      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b6b      	ldr	r3, [pc, #428]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	22f8      	movs	r2, #248	; 0xf8
 8002a36:	4393      	bics	r3, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00da      	lsls	r2, r3, #3
 8002a40:	4b67      	ldr	r3, [pc, #412]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a46:	e041      	b.n	8002acc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d024      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a50:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b62      	ldr	r3, [pc, #392]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a56:	2101      	movs	r1, #1
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe f9e6 	bl	8000e2c <HAL_GetTick>
 8002a60:	0003      	movs	r3, r0
 8002a62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a66:	f7fe f9e1 	bl	8000e2c <HAL_GetTick>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e297      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a78:	4b59      	ldr	r3, [pc, #356]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d0f1      	beq.n	8002a66 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a82:	4b57      	ldr	r3, [pc, #348]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	22f8      	movs	r2, #248	; 0xf8
 8002a88:	4393      	bics	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	00da      	lsls	r2, r3, #3
 8002a92:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	e018      	b.n	8002acc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9a:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b50      	ldr	r3, [pc, #320]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	438a      	bics	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7fe f9c1 	bl	8000e2c <HAL_GetTick>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab0:	f7fe f9bc 	bl	8000e2c <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e272      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac2:	4b47      	ldr	r3, [pc, #284]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d1f1      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d036      	beq.n	8002b44 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d019      	beq.n	8002b12 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ade:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7fe f99f 	bl	8000e2c <HAL_GetTick>
 8002aee:	0003      	movs	r3, r0
 8002af0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af4:	f7fe f99a 	bl	8000e2c <HAL_GetTick>
 8002af8:	0002      	movs	r2, r0
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e250      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d0f1      	beq.n	8002af4 <HAL_RCC_OscConfig+0x24c>
 8002b10:	e018      	b.n	8002b44 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b12:	4b33      	ldr	r3, [pc, #204]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b16:	4b32      	ldr	r3, [pc, #200]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b18:	2101      	movs	r1, #1
 8002b1a:	438a      	bics	r2, r1
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1e:	f7fe f985 	bl	8000e2c <HAL_GetTick>
 8002b22:	0003      	movs	r3, r0
 8002b24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b28:	f7fe f980 	bl	8000e2c <HAL_GetTick>
 8002b2c:	0002      	movs	r2, r0
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e236      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3a:	4b29      	ldr	r3, [pc, #164]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	2202      	movs	r2, #2
 8002b40:	4013      	ands	r3, r2
 8002b42:	d1f1      	bne.n	8002b28 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d100      	bne.n	8002b50 <HAL_RCC_OscConfig+0x2a8>
 8002b4e:	e0b5      	b.n	8002cbc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b50:	201f      	movs	r0, #31
 8002b52:	183b      	adds	r3, r7, r0
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b58:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b5a:	69da      	ldr	r2, [r3, #28]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	055b      	lsls	r3, r3, #21
 8002b60:	4013      	ands	r3, r2
 8002b62:	d110      	bne.n	8002b86 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b64:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b66:	69da      	ldr	r2, [r3, #28]
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b6a:	2180      	movs	r1, #128	; 0x80
 8002b6c:	0549      	lsls	r1, r1, #21
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	61da      	str	r2, [r3, #28]
 8002b72:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	055b      	lsls	r3, r3, #21
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b80:	183b      	adds	r3, r7, r0
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCC_OscConfig+0x344>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d11a      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <HAL_RCC_OscConfig+0x344>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_RCC_OscConfig+0x344>)
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	0049      	lsls	r1, r1, #1
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba0:	f7fe f944 	bl	8000e2c <HAL_GetTick>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002baa:	f7fe f93f 	bl	8000e2c <HAL_GetTick>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b64      	cmp	r3, #100	; 0x64
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1f5      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_OscConfig+0x344>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d10f      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x348>
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002bd2:	6a1a      	ldr	r2, [r3, #32]
 8002bd4:	4b02      	ldr	r3, [pc, #8]	; (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	621a      	str	r2, [r3, #32]
 8002bdc:	e036      	b.n	8002c4c <HAL_RCC_OscConfig+0x3a4>
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	40021000 	.word	0x40021000
 8002be4:	fffeffff 	.word	0xfffeffff
 8002be8:	fffbffff 	.word	0xfffbffff
 8002bec:	40007000 	.word	0x40007000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10c      	bne.n	8002c12 <HAL_RCC_OscConfig+0x36a>
 8002bf8:	4bca      	ldr	r3, [pc, #808]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002bfa:	6a1a      	ldr	r2, [r3, #32]
 8002bfc:	4bc9      	ldr	r3, [pc, #804]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	438a      	bics	r2, r1
 8002c02:	621a      	str	r2, [r3, #32]
 8002c04:	4bc7      	ldr	r3, [pc, #796]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c06:	6a1a      	ldr	r2, [r3, #32]
 8002c08:	4bc6      	ldr	r3, [pc, #792]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	438a      	bics	r2, r1
 8002c0e:	621a      	str	r2, [r3, #32]
 8002c10:	e01c      	b.n	8002c4c <HAL_RCC_OscConfig+0x3a4>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x38c>
 8002c1a:	4bc2      	ldr	r3, [pc, #776]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c1c:	6a1a      	ldr	r2, [r3, #32]
 8002c1e:	4bc1      	ldr	r3, [pc, #772]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c20:	2104      	movs	r1, #4
 8002c22:	430a      	orrs	r2, r1
 8002c24:	621a      	str	r2, [r3, #32]
 8002c26:	4bbf      	ldr	r3, [pc, #764]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c28:	6a1a      	ldr	r2, [r3, #32]
 8002c2a:	4bbe      	ldr	r3, [pc, #760]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	621a      	str	r2, [r3, #32]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0x3a4>
 8002c34:	4bbb      	ldr	r3, [pc, #748]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c36:	6a1a      	ldr	r2, [r3, #32]
 8002c38:	4bba      	ldr	r3, [pc, #744]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	438a      	bics	r2, r1
 8002c3e:	621a      	str	r2, [r3, #32]
 8002c40:	4bb8      	ldr	r3, [pc, #736]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c42:	6a1a      	ldr	r2, [r3, #32]
 8002c44:	4bb7      	ldr	r3, [pc, #732]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c46:	2104      	movs	r1, #4
 8002c48:	438a      	bics	r2, r1
 8002c4a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d014      	beq.n	8002c7e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c54:	f7fe f8ea 	bl	8000e2c <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5c:	e009      	b.n	8002c72 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7fe f8e5 	bl	8000e2c <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	4aaf      	ldr	r2, [pc, #700]	; (8002f28 <HAL_RCC_OscConfig+0x680>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e19a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	4bac      	ldr	r3, [pc, #688]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	2202      	movs	r2, #2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x3b6>
 8002c7c:	e013      	b.n	8002ca6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7e:	f7fe f8d5 	bl	8000e2c <HAL_GetTick>
 8002c82:	0003      	movs	r3, r0
 8002c84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c86:	e009      	b.n	8002c9c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c88:	f7fe f8d0 	bl	8000e2c <HAL_GetTick>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	4aa5      	ldr	r2, [pc, #660]	; (8002f28 <HAL_RCC_OscConfig+0x680>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e185      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9c:	4ba1      	ldr	r3, [pc, #644]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ca6:	231f      	movs	r3, #31
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb0:	4b9c      	ldr	r3, [pc, #624]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	4b9b      	ldr	r3, [pc, #620]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002cb6:	499d      	ldr	r1, [pc, #628]	; (8002f2c <HAL_RCC_OscConfig+0x684>)
 8002cb8:	400a      	ands	r2, r1
 8002cba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d063      	beq.n	8002d8e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d12a      	bne.n	8002d24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cce:	4b95      	ldr	r3, [pc, #596]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd2:	4b94      	ldr	r3, [pc, #592]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002cd4:	2104      	movs	r1, #4
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002cda:	4b92      	ldr	r3, [pc, #584]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cde:	4b91      	ldr	r3, [pc, #580]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe f8a1 	bl	8000e2c <HAL_GetTick>
 8002cea:	0003      	movs	r3, r0
 8002cec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cf0:	f7fe f89c 	bl	8000e2c <HAL_GetTick>
 8002cf4:	0002      	movs	r2, r0
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e152      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d02:	4b88      	ldr	r3, [pc, #544]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d06:	2202      	movs	r2, #2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d0f1      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d0c:	4b85      	ldr	r3, [pc, #532]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	22f8      	movs	r2, #248	; 0xf8
 8002d12:	4393      	bics	r3, r2
 8002d14:	0019      	movs	r1, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	00da      	lsls	r2, r3, #3
 8002d1c:	4b81      	ldr	r3, [pc, #516]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	635a      	str	r2, [r3, #52]	; 0x34
 8002d22:	e034      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	3305      	adds	r3, #5
 8002d2a:	d111      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002d2c:	4b7d      	ldr	r3, [pc, #500]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d30:	4b7c      	ldr	r3, [pc, #496]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d32:	2104      	movs	r1, #4
 8002d34:	438a      	bics	r2, r1
 8002d36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d38:	4b7a      	ldr	r3, [pc, #488]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	22f8      	movs	r2, #248	; 0xf8
 8002d3e:	4393      	bics	r3, r2
 8002d40:	0019      	movs	r1, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	00da      	lsls	r2, r3, #3
 8002d48:	4b76      	ldr	r3, [pc, #472]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d4e:	e01e      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d50:	4b74      	ldr	r3, [pc, #464]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d54:	4b73      	ldr	r3, [pc, #460]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d56:	2104      	movs	r1, #4
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002d5c:	4b71      	ldr	r3, [pc, #452]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d60:	4b70      	ldr	r3, [pc, #448]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d62:	2101      	movs	r1, #1
 8002d64:	438a      	bics	r2, r1
 8002d66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d68:	f7fe f860 	bl	8000e2c <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d72:	f7fe f85b 	bl	8000e2c <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e111      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d84:	4b67      	ldr	r3, [pc, #412]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d88:	2202      	movs	r2, #2
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d1f1      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2220      	movs	r2, #32
 8002d94:	4013      	ands	r3, r2
 8002d96:	d05c      	beq.n	8002e52 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d98:	4b62      	ldr	r3, [pc, #392]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	220c      	movs	r2, #12
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d00e      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002da4:	4b5f      	ldr	r3, [pc, #380]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	220c      	movs	r2, #12
 8002daa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d114      	bne.n	8002dda <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002db0:	4b5c      	ldr	r3, [pc, #368]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	23c0      	movs	r3, #192	; 0xc0
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	401a      	ands	r2, r3
 8002dba:	23c0      	movs	r3, #192	; 0xc0
 8002dbc:	025b      	lsls	r3, r3, #9
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d10b      	bne.n	8002dda <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002dc2:	4b58      	ldr	r3, [pc, #352]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	025b      	lsls	r3, r3, #9
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d040      	beq.n	8002e50 <HAL_RCC_OscConfig+0x5a8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d03c      	beq.n	8002e50 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0e6      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d01b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002de2:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de6:	4b4f      	ldr	r3, [pc, #316]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	0249      	lsls	r1, r1, #9
 8002dec:	430a      	orrs	r2, r1
 8002dee:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe f81c 	bl	8000e2c <HAL_GetTick>
 8002df4:	0003      	movs	r3, r0
 8002df6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dfa:	f7fe f817 	bl	8000e2c <HAL_GetTick>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0cd      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002e0c:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	025b      	lsls	r3, r3, #9
 8002e14:	4013      	ands	r3, r2
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x552>
 8002e18:	e01b      	b.n	8002e52 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002e1a:	4b42      	ldr	r3, [pc, #264]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e1e:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e20:	4943      	ldr	r1, [pc, #268]	; (8002f30 <HAL_RCC_OscConfig+0x688>)
 8002e22:	400a      	ands	r2, r1
 8002e24:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7fe f801 	bl	8000e2c <HAL_GetTick>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e30:	f7fd fffc 	bl	8000e2c <HAL_GetTick>
 8002e34:	0002      	movs	r2, r0
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0b2      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002e42:	4b38      	ldr	r3, [pc, #224]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	025b      	lsls	r3, r3, #9
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x588>
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002e50:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d100      	bne.n	8002e5c <HAL_RCC_OscConfig+0x5b4>
 8002e5a:	e0a4      	b.n	8002fa6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e5c:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	220c      	movs	r2, #12
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d100      	bne.n	8002e6a <HAL_RCC_OscConfig+0x5c2>
 8002e68:	e078      	b.n	8002f5c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d14c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e72:	4b2c      	ldr	r3, [pc, #176]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e78:	492e      	ldr	r1, [pc, #184]	; (8002f34 <HAL_RCC_OscConfig+0x68c>)
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7fd ffd5 	bl	8000e2c <HAL_GetTick>
 8002e82:	0003      	movs	r3, r0
 8002e84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fd ffd0 	bl	8000e2c <HAL_GetTick>
 8002e8c:	0002      	movs	r2, r0
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e086      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9a:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	049b      	lsls	r3, r3, #18
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea6:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	220f      	movs	r2, #15
 8002eac:	4393      	bics	r3, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eba:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4a1e      	ldr	r2, [pc, #120]	; (8002f38 <HAL_RCC_OscConfig+0x690>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	0449      	lsls	r1, r1, #17
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee2:	f7fd ffa3 	bl	8000e2c <HAL_GetTick>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fd ff9e 	bl	8000e2c <HAL_GetTick>
 8002ef0:	0002      	movs	r2, r0
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e054      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002efe:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	049b      	lsls	r3, r3, #18
 8002f06:	4013      	ands	r3, r2
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x644>
 8002f0a:	e04c      	b.n	8002fa6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002f12:	4908      	ldr	r1, [pc, #32]	; (8002f34 <HAL_RCC_OscConfig+0x68c>)
 8002f14:	400a      	ands	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fd ff88 	bl	8000e2c <HAL_GetTick>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x6a6>
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	40021000 	.word	0x40021000
 8002f28:	00001388 	.word	0x00001388
 8002f2c:	efffffff 	.word	0xefffffff
 8002f30:	fffeffff 	.word	0xfffeffff
 8002f34:	feffffff 	.word	0xfeffffff
 8002f38:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fd ff76 	bl	8000e2c <HAL_GetTick>
 8002f40:	0002      	movs	r2, r0
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e02c      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4e:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <HAL_RCC_OscConfig+0x708>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	049b      	lsls	r3, r3, #18
 8002f56:	4013      	ands	r3, r2
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x694>
 8002f5a:	e024      	b.n	8002fa6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e01f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_RCC_OscConfig+0x708>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <HAL_RCC_OscConfig+0x708>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	23c0      	movs	r3, #192	; 0xc0
 8002f78:	025b      	lsls	r3, r3, #9
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d10e      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	220f      	movs	r2, #15
 8002f88:	401a      	ands	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	23f0      	movs	r3, #240	; 0xf0
 8002f96:	039b      	lsls	r3, r3, #14
 8002f98:	401a      	ands	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b008      	add	sp, #32
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000

08002fb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0bf      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b61      	ldr	r3, [pc, #388]	; (8003150 <HAL_RCC_ClockConfig+0x19c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d911      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b5e      	ldr	r3, [pc, #376]	; (8003150 <HAL_RCC_ClockConfig+0x19c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4393      	bics	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	4b5b      	ldr	r3, [pc, #364]	; (8003150 <HAL_RCC_ClockConfig+0x19c>)
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe8:	4b59      	ldr	r3, [pc, #356]	; (8003150 <HAL_RCC_ClockConfig+0x19c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2201      	movs	r2, #1
 8002fee:	4013      	ands	r3, r2
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0a6      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2202      	movs	r2, #2
 8003000:	4013      	ands	r3, r2
 8003002:	d015      	beq.n	8003030 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2204      	movs	r2, #4
 800300a:	4013      	ands	r3, r2
 800300c:	d006      	beq.n	800301c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800300e:	4b51      	ldr	r3, [pc, #324]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4b50      	ldr	r3, [pc, #320]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003014:	21e0      	movs	r1, #224	; 0xe0
 8003016:	00c9      	lsls	r1, r1, #3
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800301c:	4b4d      	ldr	r3, [pc, #308]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	22f0      	movs	r2, #240	; 0xf0
 8003022:	4393      	bics	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	4b4a      	ldr	r3, [pc, #296]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2201      	movs	r2, #1
 8003036:	4013      	ands	r3, r2
 8003038:	d04c      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	4b44      	ldr	r3, [pc, #272]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	029b      	lsls	r3, r3, #10
 800304a:	4013      	ands	r3, r2
 800304c:	d120      	bne.n	8003090 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e07a      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305a:	4b3e      	ldr	r3, [pc, #248]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	049b      	lsls	r3, r3, #18
 8003062:	4013      	ands	r3, r2
 8003064:	d114      	bne.n	8003090 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e06e      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003072:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	025b      	lsls	r3, r3, #9
 800307a:	4013      	ands	r3, r2
 800307c:	d108      	bne.n	8003090 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e062      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003082:	4b34      	ldr	r3, [pc, #208]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2202      	movs	r2, #2
 8003088:	4013      	ands	r3, r2
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e05b      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003090:	4b30      	ldr	r3, [pc, #192]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2203      	movs	r2, #3
 8003096:	4393      	bics	r3, r2
 8003098:	0019      	movs	r1, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 80030a0:	430a      	orrs	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a4:	f7fd fec2 	bl	8000e2c <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ac:	e009      	b.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ae:	f7fd febd 	bl	8000e2c <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <HAL_RCC_ClockConfig+0x1a4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e042      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	4b24      	ldr	r3, [pc, #144]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	220c      	movs	r2, #12
 80030c8:	401a      	ands	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d1ec      	bne.n	80030ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d4:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <HAL_RCC_ClockConfig+0x19c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2201      	movs	r2, #1
 80030da:	4013      	ands	r3, r2
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d211      	bcs.n	8003106 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <HAL_RCC_ClockConfig+0x19c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2201      	movs	r2, #1
 80030e8:	4393      	bics	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	4b18      	ldr	r3, [pc, #96]	; (8003150 <HAL_RCC_ClockConfig+0x19c>)
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f4:	4b16      	ldr	r3, [pc, #88]	; (8003150 <HAL_RCC_ClockConfig+0x19c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2201      	movs	r2, #1
 80030fa:	4013      	ands	r3, r2
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d001      	beq.n	8003106 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e020      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2204      	movs	r2, #4
 800310c:	4013      	ands	r3, r2
 800310e:	d009      	beq.n	8003124 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a11      	ldr	r2, [pc, #68]	; (800315c <HAL_RCC_ClockConfig+0x1a8>)
 8003116:	4013      	ands	r3, r2
 8003118:	0019      	movs	r1, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003124:	f000 f820 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003128:	0001      	movs	r1, r0
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	220f      	movs	r2, #15
 8003132:	4013      	ands	r3, r2
 8003134:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <HAL_RCC_ClockConfig+0x1ac>)
 8003136:	5cd3      	ldrb	r3, [r2, r3]
 8003138:	000a      	movs	r2, r1
 800313a:	40da      	lsrs	r2, r3
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x1b0>)
 800313e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003140:	2003      	movs	r0, #3
 8003142:	f7fd fe2d 	bl	8000da0 <HAL_InitTick>
  
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	0018      	movs	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	b004      	add	sp, #16
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40022000 	.word	0x40022000
 8003154:	40021000 	.word	0x40021000
 8003158:	00001388 	.word	0x00001388
 800315c:	fffff8ff 	.word	0xfffff8ff
 8003160:	080032fc 	.word	0x080032fc
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b08f      	sub	sp, #60	; 0x3c
 800316c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800316e:	2314      	movs	r3, #20
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	4a38      	ldr	r2, [pc, #224]	; (8003254 <HAL_RCC_GetSysClockFreq+0xec>)
 8003174:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003176:	c313      	stmia	r3!, {r0, r1, r4}
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	4a36      	ldr	r2, [pc, #216]	; (8003258 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003180:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003182:	c313      	stmia	r3!, {r0, r1, r4}
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800318c:	2300      	movs	r3, #0
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003190:	2300      	movs	r3, #0
 8003192:	637b      	str	r3, [r7, #52]	; 0x34
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800319c:	4b2f      	ldr	r3, [pc, #188]	; (800325c <HAL_RCC_GetSysClockFreq+0xf4>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	220c      	movs	r2, #12
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	d047      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0xd4>
 80031ac:	d849      	bhi.n	8003242 <HAL_RCC_GetSysClockFreq+0xda>
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d002      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x50>
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d003      	beq.n	80031be <HAL_RCC_GetSysClockFreq+0x56>
 80031b6:	e044      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031b8:	4b29      	ldr	r3, [pc, #164]	; (8003260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031bc:	e044      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80031be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c0:	0c9b      	lsrs	r3, r3, #18
 80031c2:	220f      	movs	r2, #15
 80031c4:	4013      	ands	r3, r2
 80031c6:	2214      	movs	r2, #20
 80031c8:	18ba      	adds	r2, r7, r2
 80031ca:	5cd3      	ldrb	r3, [r2, r3]
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <HAL_RCC_GetSysClockFreq+0xf4>)
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	220f      	movs	r2, #15
 80031d4:	4013      	ands	r3, r2
 80031d6:	1d3a      	adds	r2, r7, #4
 80031d8:	5cd3      	ldrb	r3, [r2, r3]
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80031dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031de:	23c0      	movs	r3, #192	; 0xc0
 80031e0:	025b      	lsls	r3, r3, #9
 80031e2:	401a      	ands	r2, r3
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	025b      	lsls	r3, r3, #9
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d109      	bne.n	8003200 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ee:	481c      	ldr	r0, [pc, #112]	; (8003260 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031f0:	f7fc ff8a 	bl	8000108 <__udivsi3>
 80031f4:	0003      	movs	r3, r0
 80031f6:	001a      	movs	r2, r3
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	4353      	muls	r3, r2
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
 80031fe:	e01a      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003202:	23c0      	movs	r3, #192	; 0xc0
 8003204:	025b      	lsls	r3, r3, #9
 8003206:	401a      	ands	r2, r3
 8003208:	23c0      	movs	r3, #192	; 0xc0
 800320a:	025b      	lsls	r3, r3, #9
 800320c:	429a      	cmp	r2, r3
 800320e:	d109      	bne.n	8003224 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003212:	4814      	ldr	r0, [pc, #80]	; (8003264 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003214:	f7fc ff78 	bl	8000108 <__udivsi3>
 8003218:	0003      	movs	r3, r0
 800321a:	001a      	movs	r2, r3
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	4353      	muls	r3, r2
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
 8003222:	e008      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003226:	4810      	ldr	r0, [pc, #64]	; (8003268 <HAL_RCC_GetSysClockFreq+0x100>)
 8003228:	f7fc ff6e 	bl	8000108 <__udivsi3>
 800322c:	0003      	movs	r3, r0
 800322e:	001a      	movs	r2, r3
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	4353      	muls	r3, r2
 8003234:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003238:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800323a:	e005      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800323c:	4b09      	ldr	r3, [pc, #36]	; (8003264 <HAL_RCC_GetSysClockFreq+0xfc>)
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003240:	e002      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_GetSysClockFreq+0x100>)
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003246:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b00f      	add	sp, #60	; 0x3c
 8003250:	bd90      	pop	{r4, r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	080032dc 	.word	0x080032dc
 8003258:	080032ec 	.word	0x080032ec
 800325c:	40021000 	.word	0x40021000
 8003260:	00b71b00 	.word	0x00b71b00
 8003264:	02dc6c00 	.word	0x02dc6c00
 8003268:	007a1200 	.word	0x007a1200

0800326c <__libc_init_array>:
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	2600      	movs	r6, #0
 8003270:	4d0c      	ldr	r5, [pc, #48]	; (80032a4 <__libc_init_array+0x38>)
 8003272:	4c0d      	ldr	r4, [pc, #52]	; (80032a8 <__libc_init_array+0x3c>)
 8003274:	1b64      	subs	r4, r4, r5
 8003276:	10a4      	asrs	r4, r4, #2
 8003278:	42a6      	cmp	r6, r4
 800327a:	d109      	bne.n	8003290 <__libc_init_array+0x24>
 800327c:	2600      	movs	r6, #0
 800327e:	f000 f821 	bl	80032c4 <_init>
 8003282:	4d0a      	ldr	r5, [pc, #40]	; (80032ac <__libc_init_array+0x40>)
 8003284:	4c0a      	ldr	r4, [pc, #40]	; (80032b0 <__libc_init_array+0x44>)
 8003286:	1b64      	subs	r4, r4, r5
 8003288:	10a4      	asrs	r4, r4, #2
 800328a:	42a6      	cmp	r6, r4
 800328c:	d105      	bne.n	800329a <__libc_init_array+0x2e>
 800328e:	bd70      	pop	{r4, r5, r6, pc}
 8003290:	00b3      	lsls	r3, r6, #2
 8003292:	58eb      	ldr	r3, [r5, r3]
 8003294:	4798      	blx	r3
 8003296:	3601      	adds	r6, #1
 8003298:	e7ee      	b.n	8003278 <__libc_init_array+0xc>
 800329a:	00b3      	lsls	r3, r6, #2
 800329c:	58eb      	ldr	r3, [r5, r3]
 800329e:	4798      	blx	r3
 80032a0:	3601      	adds	r6, #1
 80032a2:	e7f2      	b.n	800328a <__libc_init_array+0x1e>
 80032a4:	0800330c 	.word	0x0800330c
 80032a8:	0800330c 	.word	0x0800330c
 80032ac:	0800330c 	.word	0x0800330c
 80032b0:	08003310 	.word	0x08003310

080032b4 <memset>:
 80032b4:	0003      	movs	r3, r0
 80032b6:	1882      	adds	r2, r0, r2
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d100      	bne.n	80032be <memset+0xa>
 80032bc:	4770      	bx	lr
 80032be:	7019      	strb	r1, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	e7f9      	b.n	80032b8 <memset+0x4>

080032c4 <_init>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ca:	bc08      	pop	{r3}
 80032cc:	469e      	mov	lr, r3
 80032ce:	4770      	bx	lr

080032d0 <_fini>:
 80032d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d6:	bc08      	pop	{r3}
 80032d8:	469e      	mov	lr, r3
 80032da:	4770      	bx	lr
